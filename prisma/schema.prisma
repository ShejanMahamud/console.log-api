generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  name            String
  email           String    @unique
  profilePicture  String
  password        String?
  role            UserRole  @default(user)
  provider        Provider  @default(email)
  refreshToken    String?
  refreshTokenExp DateTime?
  verifyToken     String?
  verifyTokenExp  DateTime?
  resetToken      String?
  resetTokenExp   DateTime?
  isDeleted       Boolean   @default(false)
  emailVerified   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  //relations
  followers                 Follower[]                  @relation("UserFollowing")
  following                 Follower[]                  @relation("UserFollowers")
  Post                      Post[]
  PostUpvote                PostUpvote[]
  PostDownvote              PostDownvote[]
  PostComments              PostComments[]
  PostCommentsUpvote        PostCommentsUpvote[]
  PostCommentsDownvote      PostCommentsDownvote[]
  PostCommentsReply         PostCommentsReply[]
  PostCommentsReplyUpvote   PostCommentsReplyUpvote[]
  PostCommentsReplyDownvote PostCommentsReplyDownvote[]

  @@map("users")
}

model Follower {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Post {
  id                        String                      @id @default(uuid())
  title                     String
  image                     String
  content                   String
  userId                    String
  status                    Boolean
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  //relations
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostUpvote                PostUpvote[]
  PostDownvote              PostDownvote[]
  PostComments              PostComments[]
  PostCommentsUpvote        PostCommentsUpvote[]
  PostCommentsDownvote      PostCommentsDownvote[]
  PostCommentsReply         PostCommentsReply[]
  PostCommentsReplyUpvote   PostCommentsReplyUpvote[]
  PostCommentsReplyDownvote PostCommentsReplyDownvote[]
  PostCategory              PostCategory[]
  PostTags                  PostTags[]

  @@map("posts")
}

model PostUpvote {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_upvotes")
}

model PostDownvote {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_downvotes")
}

model PostComments {
  id                   String                 @id @default(uuid())
  userId               String
  postId               String
  content              String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  //relations
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post                 Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  PostCommentsUpvote   PostCommentsUpvote[]
  PostCommentsDownvote PostCommentsDownvote[]
  PostCommentsReply    PostCommentsReply[]

  @@map("post_comments")
}

model PostCommentsUpvote {
  id        String       @id @default(uuid())
  userId    String
  postId    String
  commentId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  //relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   PostComments @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("post_comments_upvotes")
}

model PostCommentsDownvote {
  id        String       @id @default(uuid())
  userId    String
  postId    String
  commentId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  //relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   PostComments @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("post_comments_downvotes")
}

model PostCommentsReply {
  id                        String                      @id @default(uuid())
  userId                    String
  postId                    String
  content                   String
  commentId                 String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  //relations
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post                      Post                        @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment                   PostComments                @relation(fields: [commentId], references: [id], onDelete: Cascade)
  PostCommentsReplyUpvote   PostCommentsReplyUpvote[]
  PostCommentsReplyDownvote PostCommentsReplyDownvote[]

  @@map("post_comments_reply")
}

model PostCommentsReplyUpvote {
  id        String            @id @default(uuid())
  userId    String
  postId    String
  replyId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  //relations
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply     PostCommentsReply @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@map("post_comments_replies_upvotes")
}

model PostCommentsReplyDownvote {
  id        String            @id @default(uuid())
  userId    String
  postId    String
  replyId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  //relations
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply     PostCommentsReply @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@map("post_comments_replies_downvotes")
}

model Category {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String
  status       Boolean
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostCategory PostCategory[]

  @@map("categories")
}

model PostCategory {
  id         String   @id @default(uuid())
  postId     String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  //relations
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
  @@map("post_categories")
}

model Tags {
  id          String     @id @default(uuid())
  name        String     @unique
  status      Boolean
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  PostTags    PostTags[]

  @@map("tags")
}

model PostTags {
  id        String   @id @default(uuid())
  postId    String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tags     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

enum UserRole {
  user
  admin
  moderator
}

enum Provider {
  google
  github
  email
}
