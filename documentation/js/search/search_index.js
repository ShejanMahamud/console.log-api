var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AccountVerifyDto.html",[0,0.162,1,2.264]],["body/classes/AccountVerifyDto.html",[0,0.259,1,3.616,2,1.109,3,0.303,4,0.303,5,0.225,6,5.005,7,3.644,8,0.474,9,1.592,10,2.688,11,4.403,12,5.005,13,0.595,14,0.025,15,0.75,16,1.818,17,2.229,18,0.843,19,4.31,20,4.31,21,0.343,22,2.437,23,2.275,24,1.548,25,0.303,26,0.02,27,0.02]],["title/controllers/AppController.html",[28,2.058,29,2.264]],["body/controllers/AppController.html",[0,0.203,3,0.376,4,0.297,5,0.221,8,0.465,14,0.026,15,0.511,16,1.422,18,0.659,21,0.468,25,0.297,26,0.02,27,0.02,28,3.251,29,3.576,30,2.571,31,3.58,32,1.798,33,6.169,34,4.234,35,1.422,36,3.982,37,3.58,38,3.576,39,3.982,40,0.887,41,5.353,42,3.149,43,3.982,44,4.234,45,1.871,46,1.627,47,2.357,48,3.58,49,4.234]],["title/modules/AppModule.html",[50,1.138,51,2.264]],["body/modules/AppModule.html",[0,0.166,3,0.243,4,0.243,5,0.181,14,0.026,21,0.51,25,0.243,26,0.017,27,0.017,29,3.555,30,2.85,40,0.726,47,1.928,50,1.788,51,4.379,52,1.531,53,1.647,54,1.928,55,1.928,56,1.647,57,2.613,58,1.778,59,2.928,60,2.928,61,3.734,62,3.734,63,3.423,64,2.613,65,1.531,66,1.928,67,3.463,68,2.85,69,3.463,70,1.426,71,4.693,72,2.928,73,4.693,74,3.463,75,2.576,76,3.463,77,3.463,78,3.463,79,3.463,80,3.463,81,3.463,82,2.928,83,3.463,84,2.928,85,2.928,86,3.463,87,3.463,88,2.576,89,3.463,90,2.928,91,3.463]],["title/controllers/AuthController.html",[28,2.058,92,2.264]],["body/controllers/AuthController.html",[0,0.035,1,1.5,3,0.051,4,0.051,5,0.038,8,0.08,10,0.301,13,0.441,14,0.026,15,0.22,16,1.447,18,0.671,21,0.38,25,0.051,26,0.005,27,0.005,28,0.444,30,0.444,32,0.446,35,1.447,40,0.153,42,0.544,46,1.541,47,1.625,65,1.905,75,0.544,82,3.643,84,3.643,92,0.887,93,0.618,94,0.731,95,0.618,96,3.953,97,3.594,98,1.328,99,1.826,100,1.328,101,2.247,102,1.328,103,2.247,104,1.328,105,4.309,106,2.607,107,2.204,108,1.826,109,1.328,110,1.328,111,0.731,112,1.5,113,1.328,114,0.731,115,1.826,116,2.247,117,2.616,118,1.826,119,5.026,120,5.456,121,2.879,122,1.328,123,2.247,124,4.167,125,2.247,126,5.026,127,2.607,128,4.167,129,1.328,130,1.411,131,4.666,132,4.666,133,3.945,134,0.731,135,1.347,136,1.072,137,1.26,138,2.705,139,3.392,140,0.731,141,1.5,142,5.026,143,2.705,144,1.328,145,1.328,146,3.839,147,0.731,148,1.751,149,1.328,150,1.826,151,0.731,152,0.731,153,1.5,154,0.731,155,1.826,156,2.468,157,1.123,158,1.328,159,1.328,160,0.731,161,0.731,162,2.247,163,3.392,164,4.438,165,1.826,166,2.247,167,2.247,168,0.731,169,0.731,170,0.731,171,1.328,172,2.247,173,2.247,174,1.9,175,0.731,176,0.731,177,2.984,178,0.731,179,0.731,180,0.731,181,0.731,182,0.731,183,1.5,184,0.731,185,0.731,186,0.731,187,0.731,188,1.5,189,0.731,190,0.731,191,2.713,192,0.731,193,0.731,194,1.364,195,1.364,196,1.544,197,0.731,198,0.731,199,0.731,200,1.328,201,2.919,202,0.731,203,1.328,204,0.731,205,1.328,206,1.328,207,0.731,208,1.328,209,0.731,210,0.731,211,1.328,212,0.731,213,2.247,214,2.375,215,3.084,216,0.731,217,0.731,218,0.731,219,1.5,220,1.328,221,0.731,222,0.731,223,1.328,224,0.731,225,0.807,226,0.731,227,1.328,228,0.731,229,1.544,230,1.328,231,0.731,232,0.618,233,1.328,234,0.731,235,1.328,236,0.618,237,1.328,238,0.731,239,0.731,240,0.731,241,2.247,242,0.731,243,0.407,244,0.731,245,0.618,246,0.887,247,2.247,248,0.731,249,4.438,250,1.328,251,5.795,252,0.731,253,4.438,254,1.219,255,0.618,256,0.731,257,0.731,258,0.731,259,1.826,260,0.731,261,1.123,262,0.731,263,0.887,264,0.731,265,1.328,266,0.887,267,0.731,268,0.731,269,0.731,270,0.731,271,0.731,272,0.731,273,0.731,274,0.731,275,0.618,276,0.731,277,0.731,278,0.731,279,1.826,280,1.826,281,1.826,282,2.878,283,3.839,284,3.647,285,2.919,286,2.919,287,1.328,288,4.309,289,0.731,290,4.871,291,0.731,292,0.731,293,0.731,294,0.731,295,0.618,296,1.328,297,0.731,298,0.731,299,0.731,300,0.731,301,0.618,302,0.731,303,0.731,304,3.839,305,1.9,306,1.9,307,0.618,308,0.731,309,0.731,310,0.731,311,1.328,312,2.607,313,1.123,314,1.328,315,1.328,316,0.731,317,0.988,318,0.731,319,0.731,320,0.731,321,1.328,322,0.731,323,0.731,324,0.731,325,0.731,326,0.731,327,0.731,328,0.731,329,0.731,330,0.731,331,0.731,332,1.9,333,2.247,334,2.247,335,1.826,336,1.328,337,0.731,338,0.731,339,0.731,340,0.731,341,0.731,342,1.328,343,0.731,344,0.731,345,0.731,346,0.731,347,0.731]],["title/modules/AuthModule.html",[50,1.138,61,2.058]],["body/modules/AuthModule.html",[0,0.156,3,0.229,4,0.229,5,0.17,14,0.026,21,0.516,25,0.229,26,0.017,27,0.017,30,2.737,40,0.684,50,1.734,52,1.443,53,1.553,54,1.818,55,1.818,56,1.553,57,2.874,58,1.677,61,4.137,64,2.51,65,1.443,66,1.818,68,2.737,92,3.448,254,4.034,255,2.761,348,2.761,349,2.761,350,2.761,351,3.668,352,3.668,353,3.668,354,3.668,355,3.668,356,3.668,357,3.265,358,3.265,359,2.761,360,3.265,361,3.265,362,3.265,363,3.265,364,3.265,365,4.508,366,3.265,367,3.265,368,3.265]],["title/classes/ChangePasswordDto.html",[0,0.162,112,2.264]],["body/classes/ChangePasswordDto.html",[0,0.249,2,1.042,3,0.284,4,0.284,5,0.211,8,0.445,9,1.53,10,2.753,11,4.276,13,0.632,14,0.025,15,0.776,16,1.93,17,2.367,18,0.895,21,0.323,22,2.498,23,2.332,24,1.454,25,0.284,26,0.019,27,0.019,112,3.475,369,5.131,370,2.704,371,4.861,372,5.749,373,3.423,374,3.423,375,3.011]],["title/classes/ForgetPasswordDto.html",[0,0.162,141,2.264]],["body/classes/ForgetPasswordDto.html",[0,0.27,2,1.186,3,0.324,4,0.324,5,0.24,8,0.507,9,1.659,10,2.512,13,0.507,14,0.025,15,0.681,16,1.547,17,1.898,18,0.717,21,0.367,22,2.324,23,2.169,24,1.655,25,0.324,26,0.021,27,0.021,141,3.769,148,2.344,370,3.078,375,3.428,376,4.772]],["title/classes/GithubLoginDto.html",[0,0.162,263,2.264]],["body/classes/GithubLoginDto.html",[0,0.246,2,1.021,3,0.279,4,0.279,5,0.207,8,0.436,9,1.51,13,0.662,14,0.025,15,0.796,16,2.022,17,2.48,18,0.937,21,0.316,22,2.568,23,2.397,24,1.425,25,0.279,26,0.019,27,0.019,136,1.465,148,2.188,195,3.458,263,3.43,377,5.274,378,2.951,379,2.924,380,3.355,381,3.355,382,3.355,383,3.355]],["title/injectables/GithubStrategy.html",[353,2.058,384,0.997]],["body/injectables/GithubStrategy.html",[0,0.217,3,0.231,4,0.231,5,0.172,8,0.362,13,0.498,14,0.026,15,0.774,18,0.706,21,0.445,25,0.231,26,0.017,27,0.017,32,1.522,40,0.69,45,2.004,46,1.742,70,1.356,117,2.753,135,1.522,136,1.334,137,1.424,139,2.784,148,1.742,163,3.833,195,1.999,225,3.393,243,1.833,353,2.753,379,2.328,384,1.333,385,1.566,386,2.784,387,2.156,388,3.028,389,2.199,390,2.657,391,3.292,392,2.466,393,2.784,394,4.384,395,5.345,396,3.292,397,3.833,398,2.199,399,2.199,400,1.999,401,2.784,402,1.356,403,1.566,404,1.69,405,1.999,406,2.199,407,2.199,408,1.833,409,2.784,410,3.292,411,2.784,412,3.292,413,2.784,414,3.292,415,2.784,416,3.292,417,2.887,418,2.784,419,4.533,420,2.784,421,2.784,422,4.533,423,2.784]],["title/classes/GoogleLoginDto.html",[0,0.162,266,2.264]],["body/classes/GoogleLoginDto.html",[0,0.246,2,1.021,3,0.279,4,0.279,5,0.207,8,0.436,9,1.51,13,0.662,14,0.025,15,0.796,16,2.022,17,2.48,18,0.937,21,0.316,22,2.568,23,2.397,24,1.425,25,0.279,26,0.019,27,0.019,136,1.465,148,2.188,195,3.458,266,3.43,378,2.951,379,2.924,380,3.355,381,3.355,382,3.355,383,3.355,424,5.274]],["title/injectables/GoogleStrategy.html",[354,2.058,384,0.997]],["body/injectables/GoogleStrategy.html",[0,0.209,3,0.219,4,0.219,5,0.163,8,0.343,13,0.48,14,0.026,15,0.765,18,0.68,21,0.435,25,0.219,26,0.016,27,0.016,32,1.467,35,1.048,40,0.654,45,1.931,70,1.285,117,3.315,135,1.467,136,1.405,137,1.372,148,1.679,177,3.749,195,1.895,225,3.315,243,1.737,317,2.321,354,2.653,379,1.602,384,1.284,385,1.484,387,2.078,388,2.918,389,2.084,390,2.597,392,2.397,393,2.639,394,4.262,395,5.361,397,3.694,398,2.084,399,2.084,400,1.895,402,1.285,403,1.484,404,1.602,405,1.895,406,2.084,407,2.084,408,1.737,409,2.639,411,2.639,413,2.639,415,2.639,417,2.432,418,2.639,420,2.639,421,2.639,423,2.639,425,2.639,426,3.121,427,5.04,428,5.46,429,3.121,430,3.694,431,2.639,432,3.121,433,3.121,434,3.121,435,3.121,436,3.121,437,3.121,438,3.121,439,3.121,440,3.121,441,3.121,442,3.121]],["title/interfaces/IJwtPayload.html",[443,2.264,444,2.058]],["body/interfaces/IJwtPayload.html",[3,0.334,4,0.334,5,0.248,8,0.523,9,1.691,13,0.632,14,0.025,15,0.807,25,0.334,26,0.021,27,0.021,148,2.469,443,3.176,444,3.493,445,4.754,446,4.02,447,6.425]],["title/injectables/JwtAccessStrategy.html",[355,2.058,384,0.997]],["body/injectables/JwtAccessStrategy.html",[0,0.229,3,0.25,4,0.25,5,0.186,8,0.392,13,0.526,14,0.026,15,0.431,18,0.745,21,0.48,25,0.25,26,0.018,27,0.018,32,1.607,35,1.198,40,0.747,45,2.116,46,1.839,70,1.468,88,2.653,135,1.607,136,1.232,137,1.504,143,1.985,157,4.048,225,3.281,243,1.985,355,2.907,384,1.408,385,1.696,387,2.277,388,3.197,389,2.382,390,2.747,392,2.57,398,2.382,399,2.382,400,2.166,402,1.468,403,1.696,404,1.831,405,2.166,406,2.382,407,2.382,408,1.985,444,3.766,448,4.019,449,3.016,450,3.566,451,4.048,452,3.566,453,4.569,454,3.016,455,3.197,456,2.166,457,3.016,458,2.166,459,3.016,460,3.566,461,3.016,462,3.016,463,3.016]],["title/injectables/JwtRefreshStrategy.html",[356,2.058,384,0.997]],["body/injectables/JwtRefreshStrategy.html",[0,0.227,3,0.246,4,0.246,5,0.183,8,0.385,13,0.52,14,0.026,15,0.423,18,0.736,21,0.477,25,0.246,26,0.018,27,0.018,32,1.588,35,1.177,40,0.734,45,2.091,46,1.818,47,1.951,70,1.443,88,2.606,135,1.588,136,1.217,137,1.486,143,2.633,156,4,225,3.252,243,1.951,317,2.606,356,2.872,384,1.391,385,1.667,387,2.25,388,3.159,389,2.34,390,2.727,392,2.547,398,2.34,399,2.34,400,2.128,402,1.443,403,1.667,404,1.799,405,2.872,406,2.34,407,2.34,408,1.951,444,3.747,448,3.983,451,4,453,4.528,454,2.963,455,3.159,456,2.128,457,2.963,458,2.128,459,2.963,461,2.963,462,2.963,463,2.963,464,2.963,465,3.504,466,3.504,467,3.504,468,3.504]],["title/classes/LoginDto.html",[0,0.162,183,2.264]],["body/classes/LoginDto.html",[0,0.259,2,1.109,3,0.303,4,0.303,5,0.225,8,0.474,9,1.592,10,2.688,13,0.595,14,0.025,15,0.75,16,1.818,17,2.229,18,0.843,21,0.343,22,2.437,23,2.275,24,1.548,25,0.303,26,0.02,27,0.02,121,3.295,148,2.275,183,3.616,469,5.005,470,2.879,471,4.31,472,4.31]],["title/classes/LogoutDto.html",[0,0.162,188,2.264]],["body/classes/LogoutDto.html",[0,0.274,2,1.209,3,0.33,4,0.33,5,0.245,8,0.517,9,1.679,13,0.517,14,0.025,15,0.689,16,1.578,17,1.935,18,0.731,21,0.374,22,2.351,23,2.194,24,1.687,25,0.33,26,0.021,27,0.021,188,3.814,473,3.973,474,5.202,475,4.699]],["title/modules/MailModule.html",[50,1.138,351,2.058]],["body/modules/MailModule.html",[0,0.148,3,0.217,4,0.217,5,0.162,14,0.026,15,0.606,21,0.504,25,0.305,26,0.016,27,0.016,40,0.649,47,1.724,50,1.924,52,1.369,53,1.473,54,1.724,55,1.724,56,1.473,57,2.794,58,2.577,63,3.307,64,2.419,65,1.369,66,1.724,68,2.638,70,1.275,95,2.618,117,1.88,130,1.369,351,3.843,390,2.387,392,1.473,402,1.789,403,1.473,405,1.88,476,2.618,477,2.618,478,2.618,479,3.096,480,3.972,481,3.096,482,3.096,483,2.902,484,2.303,485,4.344,486,3.096,487,3.096,488,2.068,489,3.096,490,2.902,491,3.096,492,3.096,493,2.068,494,3.096,495,2.303,496,3.096,497,2.303,498,3.096,499,2.303,500,3.096,501,2.618,502,3.096,503,1.724,504,3.096,505,3.096,506,3.096,507,2.618,508,2.618,509,3.096,510,2.618,511,3.096,512,3.096,513,3.096,514,4.344,515,3.096,516,3.096,517,2.618,518,3.096,519,3.096,520,2.618,521,3.096]],["title/classes/MailProcessor.html",[0,0.162,490,2.264]],["body/classes/MailProcessor.html",[0,0.126,2,0.676,3,0.185,4,0.185,5,0.137,8,0.289,13,0.689,14,0.026,15,0.679,18,0.601,21,0.402,25,0.378,26,0.014,27,0.014,32,1.297,35,0.882,40,0.551,45,1.162,46,1.484,65,2.024,97,2.78,121,2.809,130,2.024,135,1.297,136,1.178,137,1.213,138,2.549,143,1.463,148,2.16,214,2.872,215,3.871,275,2.222,282,1.755,305,3.871,379,2.351,387,1.25,408,1.463,456,1.596,483,1.755,484,1.955,490,2.579,503,1.463,510,3.265,520,2.222,522,1.955,523,4.267,524,2.628,525,5.62,526,2.628,527,3.265,528,3.753,529,2.628,530,4.433,531,2.345,532,2.872,533,3.265,534,1.463,535,2.628,536,1.349,537,2.872,538,3.871,539,3.265,540,2.872,541,3.862,542,2.222,543,1.955,544,3.862,545,2.628,546,2.628,547,2.628,548,2.222,549,2.628,550,2.628,551,2.628,552,2.628,553,2.628,554,3.862,555,3.265,556,3.862,557,3.753,558,3.862,559,3.862,560,3.862,561,3.862,562,2.628,563,3.265,564,2.628,565,2.628,566,2.628,567,2.628,568,2.628,569,2.628,570,1.955,571,2.222,572,2.628,573,2.628]],["title/injectables/MailService.html",[384,0.997,480,2.058]],["body/injectables/MailService.html",[0,0.16,3,0.235,4,0.235,5,0.175,8,0.368,13,0.685,14,0.026,15,0.735,18,0.814,21,0.417,25,0.235,26,0.017,27,0.017,32,1.54,35,1.54,40,0.701,45,2.027,65,1.48,96,4.065,97,3.696,121,2.553,135,1.756,136,1.448,137,1.643,138,3.132,148,2.162,214,2.49,379,1.719,384,1.348,385,1.592,402,1.378,403,1.592,404,1.719,480,2.784,493,3.758,495,2.49,503,1.863,534,1.863,536,1.719,538,2.83,539,2.83,542,2.83,548,3.877,555,3.877,574,2.83,575,4.585,576,4.585,577,3.347,578,3.347,579,4.585,580,4.585,581,4.757,582,3.347,583,4.585,584,3.347,585,2.83,586,3.347,587,3.411,588,3.347,589,3.347]],["title/modules/PrismaModule.html",[50,1.138,62,2.058]],["body/modules/PrismaModule.html",[0,0.205,3,0.301,4,0.301,5,0.223,14,0.025,21,0.429,25,0.301,26,0.02,27,0.02,40,0.897,50,1.981,52,1.892,53,2.035,54,2.382,55,2.382,56,2.035,57,3.285,58,3.029,62,4.017,64,3.001,65,1.892,66,2.382,590,3.618,591,3.618,592,3.618,593,4.176,594,4.279,595,4.557,596,4.279]],["title/injectables/PrismaService.html",[384,0.997,593,2.058]],["body/injectables/PrismaService.html",[0,0.234,3,0.343,4,0.343,5,0.255,14,0.025,21,0.466,25,0.343,26,0.022,27,0.022,40,1.025,384,1.72,385,2.326,387,2.782,593,3.552,597,4.135,598,6.259,599,3.638]],["title/modules/QueueModule.html",[50,1.138,63,1.887]],["body/modules/QueueModule.html",[0,0.163,3,0.238,4,0.238,5,0.177,13,0.509,14,0.026,15,0.559,21,0.42,25,0.325,26,0.017,27,0.017,40,0.711,50,1.555,52,1.5,58,1.743,63,2.578,68,2.061,70,1.398,85,3.915,107,3.915,121,1.89,133,3.915,136,1.191,282,3.092,332,3.915,390,2.506,392,1.615,402,1.398,493,3.092,495,2.525,497,2.525,499,2.525,501,2.87,503,1.89,517,3.915,534,1.89,536,1.743,595,3.915,600,3.395,601,5.269,602,3.395,603,3.395,604,3.395,605,3.395,606,3.395,607,3.395,608,4.455,609,3.395,610,4.63,611,4.63,612,5.659,613,4.63,614,5.659,615,4.63,616,4.63,617,4.63,618,4.63,619,4.63,620,4.63,621,4.63,622,3.395]],["title/classes/RefreshTokenDto.html",[0,0.162,153,2.264]],["body/classes/RefreshTokenDto.html",[0,0.259,2,1.109,3,0.303,4,0.303,5,0.225,8,0.474,9,1.592,10,2.688,13,0.595,14,0.025,15,0.75,16,1.818,17,2.229,18,0.843,21,0.343,22,2.437,23,2.275,24,1.548,25,0.303,26,0.02,27,0.02,153,3.616,191,4.403,474,5.005,623,5.005,624,3.644,625,4.31,626,4.31]],["title/classes/RegisterUserDto.html",[0,0.162,194,2.058]],["body/classes/RegisterUserDto.html",[0,0.221,2,0.869,3,0.237,4,0.237,5,0.176,8,0.371,9,1.356,10,2.733,13,0.65,14,0.026,15,0.768,16,1.896,17,1.899,18,0.92,21,0.367,22,2.434,23,2.17,24,1.212,25,0.237,26,0.017,27,0.017,38,3.08,121,3.291,136,1.352,148,2.17,194,3.19,379,2.698,470,2.254,599,2.511,627,5.16,628,6.102,629,3.375,630,3.375,631,3.375,632,3.375,633,3.375,634,4.612,635,3.9,636,4.612,637,4.612,638,3.375,639,2.854,640,3.375,641,4.612,642,3.375,643,3.375,644,3.375,645,3.375,646,3.375]],["title/classes/ResetPasswordDto.html",[0,0.162,219,2.264]],["body/classes/ResetPasswordDto.html",[0,0.249,2,1.042,3,0.284,4,0.284,5,0.211,8,0.445,9,1.53,10,2.753,11,4.276,13,0.632,14,0.025,15,0.776,16,1.93,17,2.367,18,0.895,21,0.323,22,2.498,23,2.332,24,1.454,25,0.284,26,0.019,27,0.019,191,4.276,219,3.475,370,2.704,371,4.861,373,3.423,374,3.423,375,3.011,647,5.131]],["title/classes/ResponseException.html",[0,0.162,648,2.521]],["body/classes/ResponseException.html",[0,0.129,2,0.695,3,0.19,4,0.19,5,0.141,8,0.297,13,0.297,14,0.026,15,0.685,18,0.42,21,0.314,25,0.19,26,0.015,27,0.015,32,1.322,35,0.906,36,2.008,38,4.3,39,2.008,40,0.566,48,3.931,130,1.193,135,0.906,136,0.695,137,0.848,143,2.588,174,2.282,232,2.282,246,1.803,290,3.33,301,2.282,417,3.159,430,2.282,488,1.803,499,3.458,570,3.801,648,2.929,649,2.282,650,3.33,651,4.649,652,4.321,653,3.938,654,5.11,655,2.699,656,4.649,657,4.649,658,3.931,659,2.699,660,2.699,661,2.699,662,2.699,663,3.938,664,2.699,665,2.699,666,6.305,667,2.699,668,4.321,669,2.699,670,5.11,671,3.938,672,2.699,673,5.11,674,3.938,675,4.649,676,2.699,677,2.699,678,2.699,679,2.699,680,2.699,681,4.649,682,4.649,683,3.938,684,2.699,685,2.282,686,2.282,687,2.699,688,2.282]],["title/classes/ResponseInterceptor.html",[0,0.162,689,2.521]],["body/classes/ResponseInterceptor.html",[0,0.16,2,0.861,3,0.235,4,0.235,5,0.175,8,0.368,13,0.368,14,0.026,18,0.521,21,0.417,25,0.235,26,0.017,27,0.017,32,1.54,35,1.124,36,2.49,38,3.063,39,3.891,40,0.701,46,1.762,47,1.863,135,1.124,136,0.861,137,1.052,138,2.553,143,3.132,246,2.236,306,2.83,417,3.533,488,2.236,531,2.784,563,3.877,650,3.877,658,4.423,685,3.877,686,2.83,688,2.83,689,3.411,690,2.83,691,5.23,692,5.23,693,3.347,694,5.626,695,5.23,696,5.626,697,3.347,698,5.23,699,3.347,700,2.83,701,3.347,702,3.347,703,4.585,704,4.423,705,3.347,706,3.347,707,3.347,708,3.347,709,3.347,710,3.347,711,3.347,712,3.347,713,3.347,714,3.347]],["title/classes/UpdateUserDto.html",[0,0.162,715,2.521]],["body/classes/UpdateUserDto.html",[0,0.195,2,0.726,3,0.198,4,0.198,5,0.147,8,0.31,9,1.195,12,4.03,13,0.681,14,0.026,15,0.695,16,2.079,18,0.964,21,0.416,23,2.004,24,1.012,25,0.198,26,0.015,27,0.015,37,4.411,194,1.712,261,2.384,387,1.933,456,1.712,470,1.883,599,2.097,639,2.384,668,5.438,715,3.023,716,5.314,717,4.065,718,4.766,719,4.766,720,4.766,721,4.766,722,4.766,723,4.766,724,4.766,725,4.766,726,4.065,727,2.82,728,2.82,729,4.766,730,2.82,731,5.76,732,4.766,733,2.82,734,2.82,735,2.82,736,4.766,737,2.82,738,2.82,739,2.82,740,2.82,741,2.384,742,4.766,743,5.216,744,2.82,745,6.284,746,2.384,747,2.82]],["title/modules/UploadModule.html",[50,1.138,352,2.058]],["body/modules/UploadModule.html",[0,0.174,3,0.255,4,0.255,5,0.189,14,0.026,15,0.658,21,0.483,25,0.255,26,0.018,27,0.018,40,0.761,46,1.395,50,1.831,52,1.605,53,1.727,54,2.022,55,2.022,56,1.727,57,3.036,58,2.8,64,2.697,65,1.605,66,2.022,68,2.205,70,1.495,90,3.07,130,1.605,307,3.07,352,3.865,390,2.593,392,1.727,402,1.495,497,2.701,748,3.07,749,3.07,750,3.07,751,4.078,752,3.631,753,4.097,754,2.701,755,2.701,756,2.701,757,3.236,758,3.631,759,3.631,760,3.631,761,3.631,762,3.631,763,3.631,764,3.631,765,3.631,766,3.631,767,3.631]],["title/classes/UploadProcessor.html",[0,0.162,757,2.264]],["body/classes/UploadProcessor.html",[0,0.164,2,0.881,3,0.24,4,0.24,5,0.179,8,0.376,10,1.41,13,0.512,14,0.026,18,0.725,21,0.453,25,0.24,26,0.017,27,0.017,32,1.564,35,1.15,40,0.717,45,2.058,46,1.316,97,3.214,130,2.058,135,1.564,136,1.198,137,1.463,138,1.906,229,2.895,387,1.628,402,1.917,403,1.628,404,1.758,408,1.906,417,2.593,458,2.079,523,4.475,527,2.895,530,4.664,531,2.828,532,2.547,533,3.938,534,1.906,536,1.758,557,2.547,570,2.547,587,2.547,652,2.895,753,4.802,754,3.464,755,2.547,756,4.225,757,3.11,768,2.895,769,3.424,770,3.424,771,3.424,772,4.657,773,3.424,774,3.424,775,3.424,776,3.424,777,3.424,778,3.424,779,2.895,780,3.424,781,4.657,782,3.424,783,2.895,784,3.424,785,3.424,786,3.424,787,3.424]],["title/injectables/UploadService.html",[384,0.997,751,2.058]],["body/injectables/UploadService.html",[0,0.117,3,0.172,4,0.172,5,0.254,8,0.269,9,1.078,10,2.405,13,0.642,14,0.026,15,0.745,18,0.853,21,0.437,25,0.172,26,0.014,27,0.014,32,1.231,35,1.475,40,0.513,45,1.621,46,1.688,70,1.009,96,2.934,97,3.327,130,1.083,135,1.638,136,1.344,137,1.532,196,4.633,313,2.072,384,1.078,385,1.166,390,2.319,392,2.319,402,1.51,403,1.744,404,3.276,417,2.715,458,2.961,488,2.449,493,3.487,531,2.961,534,1.364,536,1.883,557,1.823,585,2.072,587,2.728,608,2.072,704,2.072,751,2.227,779,2.072,788,2.072,789,4.876,790,4.393,791,3.667,792,3.667,793,3.667,794,2.451,795,3.667,796,3.667,797,3.667,798,2.451,799,3.667,800,2.451,801,3.667,802,3.667,803,2.451,804,2.451,805,2.451,806,1.637,807,2.451,808,2.451,809,3.667,810,3.667,811,2.451,812,2.451,813,2.451,814,3.667,815,2.451,816,2.451,817,2.451,818,2.451,819,2.451,820,2.451,821,2.451,822,3.667,823,2.451,824,2.451,825,3.667,826,2.451,827,2.451,828,2.451,829,1.823,830,2.451,831,2.451,832,2.451,833,2.451,834,2.451,835,2.451,836,2.451,837,2.451,838,2.451,839,2.451,840,2.451]],["title/classes/Util.html",[0,0.162,806,2.264]],["body/classes/Util.html",[0,0.165,2,0.886,3,0.242,4,0.242,5,0.18,8,0.379,13,0.583,14,0.026,15,0.798,18,0.826,21,0.372,25,0.242,26,0.017,27,0.017,32,1.57,35,1.782,46,2.04,96,3.545,135,1.782,136,1.366,137,1.668,282,2.3,503,2.955,531,3.457,571,3.953,806,3.122,829,4.566,841,2.912,842,6.476,843,4.675,844,4.675,845,4.675,846,3.443,847,3.443,848,3.443,849,4.675,850,4.675,851,3.443,852,5.308,853,4.675,854,5.308,855,3.443,856,3.443,857,2.912,858,3.443,859,3.443,860,3.443,861,3.443,862,3.443]],["title/coverage.html",[863,3.911]],["body/coverage.html",[0,0.314,1,1.748,5,0.137,6,2.212,7,2.212,13,0.59,14,0.026,26,0.014,27,0.014,28,2.337,29,1.748,31,2.212,43,1.946,56,1.245,92,1.748,93,2.212,112,1.748,130,1.157,141,1.748,153,1.748,183,1.748,188,1.748,194,1.589,219,1.748,254,1.748,263,1.748,266,1.748,353,1.589,354,1.589,355,1.589,356,1.589,369,2.212,370,3.05,376,2.212,377,2.212,378,2.863,384,1.75,386,2.212,424,2.212,425,2.212,443,1.748,444,1.589,446,2.212,448,2.863,449,2.212,464,2.212,469,2.212,470,3.05,473,2.212,480,1.589,490,1.748,522,3.992,528,1.946,537,1.946,540,1.946,543,1.946,574,2.212,593,1.589,597,2.212,623,2.212,624,2.212,627,2.212,647,2.212,648,1.946,649,2.212,689,1.946,690,2.212,715,1.946,716,2.212,751,1.589,757,1.748,768,2.212,788,2.212,806,1.748,841,2.212,863,2.212,864,2.616,865,2.616,866,2.616,867,6.925,868,5.366,869,2.616,870,2.616,871,2.616,872,6.177,873,5.035,874,2.616,875,3.849,876,2.616,877,5.035,878,6.075,879,2.212,880,5.035,881,2.616,882,3.861,883,3.861,884,2.212,885,2.212,886,2.616,887,2.616]],["title/dependencies.html",[53,1.939,888,2.394]],["body/dependencies.html",[0,0.236,14,0.026,24,1.34,26,0.018,27,0.018,40,0.782,42,2.777,53,1.776,70,1.537,72,3.156,75,2.777,177,2.777,243,2.078,245,3.156,246,2.493,359,3.156,400,3.571,401,3.156,431,3.156,455,2.493,456,2.267,483,2.493,484,2.777,534,2.078,536,1.917,700,3.156,741,3.156,754,3.671,755,2.777,756,2.777,857,3.156,889,3.733,890,3.733,891,3.733,892,5.528,893,3.733,894,3.733,895,3.733,896,3.733,897,3.733,898,3.733,899,3.733,900,3.733,901,3.733,902,3.733,903,3.733,904,3.733,905,3.733,906,3.733,907,3.733,908,3.733,909,3.733,910,3.733,911,3.733,912,3.733,913,3.733,914,3.733,915,3.733,916,3.733,917,3.733,918,3.733,919,3.733,920,3.733,921,3.733,922,3.733,923,3.733,924,3.733,925,3.733]],["title/miscellaneous/functions.html",[926,1.891,927,3.447]],["body/miscellaneous/functions.html",[8,0.493,13,0.61,14,0.024,15,0.67,26,0.021,27,0.021,35,1.864,43,4.484,56,2.867,135,1.864,136,1.429,137,1.744,503,3.507,879,3.795,882,3.795,883,5.326,884,4.694,885,4.694,926,2.997,927,3.795,928,4.487,929,6.028,930,4.487,931,4.487,932,4.487,933,4.487]],["title/index.html",[8,0.311,934,2.831,935,2.831]],["body/index.html",[5,0.195,14,0.026,26,0.018,27,0.018,117,2.274,130,1.655,137,1.177,138,2.085,236,4.682,455,2.501,458,2.274,483,2.501,507,4.181,508,3.166,532,2.785,536,2.843,746,3.166,783,3.166,829,3.678,936,3.744,937,2.785,938,3.744,939,4.945,940,3.744,941,3.744,942,6.122,943,3.744,944,3.744,945,3.744,946,3.744,947,3.744,948,3.744,949,3.744,950,3.744,951,4.945,952,3.744,953,3.744,954,3.744,955,3.744,956,3.744,957,3.744,958,3.744,959,3.744,960,3.744,961,3.744,962,3.744,963,3.744,964,3.744,965,3.744,966,3.744,967,3.744,968,3.744,969,3.744,970,3.744,971,3.744,972,3.744,973,3.744,974,3.744,975,3.744,976,3.744,977,3.744,978,3.744,979,3.744,980,3.744,981,3.744,982,3.744,983,3.744,984,3.744,985,3.744,986,3.744,987,3.744,988,3.744,989,3.744,990,3.744]],["title/modules.html",[52,2.044]],["body/modules.html",[14,0.021,26,0.021,27,0.021,51,3.201,52,2.118,61,2.91,62,2.91,63,2.668,351,2.91,352,2.91,991,6.594,992,6.594,993,6.594,994,6.699,995,4.793,996,4.793]],["title/overview.html",[937,3.441]],["body/overview.html",[2,0.861,14,0.025,26,0.017,27,0.017,30,2.033,50,1.124,51,4.239,52,1.48,53,1.592,54,1.863,55,1.863,56,1.592,57,1.863,58,1.719,59,2.83,60,2.83,61,4.134,62,3.696,63,3.132,64,2.553,65,1.48,66,1.863,254,3.493,295,2.83,348,2.83,349,2.83,350,2.83,351,3.854,352,3.696,353,3.176,354,3.176,355,3.176,356,3.176,385,1.592,443,2.236,476,2.83,477,2.83,478,2.83,480,3.785,590,2.83,591,2.83,592,2.83,593,3.785,635,2.83,748,2.83,749,2.83,750,2.83,751,3.785,937,2.49,997,3.347,998,3.347,999,3.347]],["title/properties.html",[9,1.199,888,2.394]],["body/properties.html",[9,1.525,14,0.025,26,0.022,27,0.022,120,4.386,1000,5.187,1001,5.187,1002,5.187,1003,5.187,1004,5.187]],["title/miscellaneous/typealiases.html",[926,1.891,1005,4.077]],["body/miscellaneous/typealiases.html",[8,0.533,13,0.686,14,0.024,26,0.022,27,0.022,522,3.608,528,4.33,530,4.33,537,4.64,540,4.64,543,4.33,581,4.922,926,3.24,1006,4.851,1007,6.469]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1001,"title":{},"body":{"properties.html":{}}}],["0.1.12",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["0.13.0",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["0.43.1",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":868,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":872,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":999,"title":{},"body":{"overview.html":{}}}],["1.8.1",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"classes/MailProcessor.html":{}}}],["100",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["1000",{"_index":615,"title":{},"body":{"modules/QueueModule.html":{}}}],["1024",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["11.0.0",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":998,"title":{},"body":{"overview.html":{}}}],["2",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"overview.html":{}}}],["2.0.0",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["2.1692.0",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["200",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["2mb",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["3",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"modules/QueueModule.html":{}}}],["3.858.0",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":620,"title":{},"body":{"modules/QueueModule.html":{}}}],["300000",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["302",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["32",{"_index":849,"title":{},"body":{"classes/Util.html":{}}}],["3600",{"_index":613,"title":{},"body":{"modules/QueueModule.html":{}}}],["4.0.1",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["401",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["409",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["429",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["5",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["5.56.9",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":997,"title":{},"body":{"overview.html":{}}}],["6.13.0",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["60000",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["7.0.5",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":635,"title":{},"body":{"classes/RegisterUserDto.html":{},"overview.html":{}}}],["8.1.0",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":617,"title":{},"body":{"modules/QueueModule.html":{}}}],["_",{"_index":437,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["_accesstoken",{"_index":397,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["_refreshtoken",{"_index":394,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["access",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAccessStrategy.html":{}}}],["access.strategy",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{}}}],["access.strategy.ts",{"_index":449,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"coverage.html":{}}}],["access.strategy.ts:23",{"_index":452,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["access.strategy.ts:8",{"_index":450,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["accesskeyid",{"_index":763,"title":{},"body":{"modules/UploadModule.html":{}}}],["account",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["account')@httpcode(httpstatus.ok)@throttle({default",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["accountverifydto",{"_index":1,"title":{"classes/AccountVerifyDto.html":{}},"body":{"classes/AccountVerifyDto.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["adapter",{"_index":516,"title":{},"body":{"modules/MailModule.html":{}}}],["address",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["address'})@apiresponse({status",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["age",{"_index":612,"title":{},"body":{"modules/QueueModule.html":{}}}],["alias",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1006,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["any).error",{"_index":683,"title":{},"body":{"classes/ResponseException.html":{}}}],["apibearerauth",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes('multipart/form",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiexcludecontroller",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["apioperation",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('authentication",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["app.controller",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":29,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":51,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":856,"title":{},"body":{"classes/Util.html":{}}}],["argon.hash(text",{"_index":860,"title":{},"body":{"classes/Util.html":{}}}],["argon.verify(hashed",{"_index":861,"title":{},"body":{"classes/Util.html":{}}}],["argon2",{"_index":857,"title":{},"body":{"classes/Util.html":{},"dependencies.html":{}}}],["argumentshost",{"_index":654,"title":{},"body":{"classes/ResponseException.html":{}}}],["array.isarray(msg",{"_index":677,"title":{},"body":{"classes/ResponseException.html":{}}}],["async",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["attempts",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"modules/QueueModule.html":{}}}],["auth",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"modules/MailModule.html":{}}}],["auth.controller",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":92,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":61,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1004,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":996,"title":{},"body":{"modules.html":{}}}],["await",{"_index":587,"title":{},"body":{"injectables/MailService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["aws",{"_index":754,"title":{},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"dependencies.html":{}}}],["aws_cloudfront_url",{"_index":813,"title":{},"body":{"injectables/UploadService.html":{}}}],["aws_s3",{"_index":760,"title":{},"body":{"modules/UploadModule.html":{}}}],["aws_secret_access_key",{"_index":767,"title":{},"body":{"modules/UploadModule.html":{}}}],["backend",{"_index":961,"title":{},"body":{"index.html":{}}}],["backoff",{"_index":618,"title":{},"body":{"modules/QueueModule.html":{}}}],["badrequestexception",{"_index":805,"title":{},"body":{"injectables/UploadService.html":{}}}],["badrequestexception('mime",{"_index":823,"title":{},"body":{"injectables/UploadService.html":{}}}],["base64",{"_index":783,"title":{},"body":{"classes/UploadProcessor.html":{},"index.html":{}}}],["before",{"_index":979,"title":{},"body":{"index.html":{}}}],["binary",{"_index":969,"title":{},"body":{"index.html":{}}}],["blogs",{"_index":941,"title":{},"body":{"index.html":{}}}],["body",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"classes/UploadProcessor.html":{}}}],["boolean",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"classes/UpdateUserDto.html":{}}}],["bootstrap",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":994,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":991,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":779,"title":{},"body":{"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["bucketname",{"_index":789,"title":{},"body":{"injectables/UploadService.html":{}}}],["buffer",{"_index":829,"title":{},"body":{"injectables/UploadService.html":{},"classes/Util.html":{},"index.html":{}}}],["buffer.from(data.buffer",{"_index":782,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["bullmodule",{"_index":601,"title":{},"body":{"modules/QueueModule.html":{}}}],["bullmodule.forrootasync",{"_index":603,"title":{},"body":{"modules/QueueModule.html":{}}}],["bullmodule.registerqueue",{"_index":609,"title":{},"body":{"modules/QueueModule.html":{}}}],["bullmq",{"_index":536,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"dependencies.html":{},"index.html":{}}}],["byte",{"_index":848,"title":{},"body":{"classes/Util.html":{}}}],["bytes",{"_index":931,"title":{},"body":{"miscellaneous/functions.html":{}}}],["callback",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["callback'})@apiresponse({status",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["callbackurl",{"_index":413,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["callhandler",{"_index":696,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["case",{"_index":554,"title":{},"body":{"classes/MailProcessor.html":{}}}],["catch",{"_index":652,"title":{},"body":{"classes/ResponseException.html":{},"classes/UploadProcessor.html":{}}}],["catch(exception",{"_index":653,"title":{},"body":{"classes/ResponseException.html":{}}}],["challenges",{"_index":965,"title":{},"body":{"index.html":{}}}],["change",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["changed",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(@body",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(data",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassworddto",{"_index":112,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["characters",{"_index":636,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["check",{"_index":816,"title":{},"body":{"injectables/UploadService.html":{}}}],["class",{"_index":0,"title":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"classes/Util.html":{}},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"classes/Util.html":{},"overview.html":{}}}],["clientid",{"_index":409,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":411,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["cloudfront",{"_index":809,"title":{},"body":{"injectables/UploadService.html":{}}}],["cloudfronturl",{"_index":790,"title":{},"body":{"injectables/UploadService.html":{}}}],["cluster_appmodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":348,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":349,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":476,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":477,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_imports",{"_index":479,"title":{},"body":{"modules/MailModule.html":{}}}],["cluster_mailmodule_providers",{"_index":478,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":590,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":591,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":592,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_uploadmodule",{"_index":748,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_exports",{"_index":750,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_providers",{"_index":749,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["command",{"_index":778,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["compression",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["conclusion",{"_index":987,"title":{},"body":{"index.html":{}}}],["concurrency",{"_index":551,"title":{},"body":{"classes/MailProcessor.html":{}}}],["concurrency(can",{"_index":547,"title":{},"body":{"classes/MailProcessor.html":{}}}],["config",{"_index":392,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{}}}],["config.get",{"_index":766,"title":{},"body":{"modules/UploadModule.html":{}}}],["config.get('access_token_secret",{"_index":460,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["config.get('aws_access_key_id",{"_index":764,"title":{},"body":{"modules/UploadModule.html":{}}}],["config.get('aws_region",{"_index":762,"title":{},"body":{"modules/UploadModule.html":{}}}],["config.get('email_host",{"_index":500,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('email_pass",{"_index":505,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('email_port",{"_index":502,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('email_user",{"_index":504,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('github_callback_url",{"_index":414,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["config.get('github_client_id",{"_index":410,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["config.get('github_client_secret",{"_index":412,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["config.get('google_callback_url",{"_index":434,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.get('google_client_id",{"_index":432,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.get('google_client_secret",{"_index":433,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.get('redis_host",{"_index":605,"title":{},"body":{"modules/QueueModule.html":{}}}],["config.get('redis_password",{"_index":606,"title":{},"body":{"modules/QueueModule.html":{}}}],["config.get('redis_port",{"_index":607,"title":{},"body":{"modules/QueueModule.html":{}}}],["config.get('refresh_token_secret",{"_index":467,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["configmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":390,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{}}}],["configure",{"_index":602,"title":{},"body":{"modules/QueueModule.html":{}}}],["configured",{"_index":622,"title":{},"body":{"modules/QueueModule.html":{}}}],["connection",{"_index":604,"title":{},"body":{"modules/QueueModule.html":{}}}],["console.log",{"_index":508,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["const",{"_index":417,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["constructor",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["constructor(config",{"_index":389,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["constructor(mailerservice",{"_index":524,"title":{},"body":{"classes/MailProcessor.html":{}}}],["constructor(mailqueue",{"_index":577,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(private",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"classes/MailProcessor.html":{}}}],["constructor(s3",{"_index":769,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["constructor(uploadqueue",{"_index":794,"title":{},"body":{"injectables/UploadService.html":{}}}],["contenttype",{"_index":784,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["context",{"_index":563,"title":{},"body":{"classes/MailProcessor.html":{},"classes/ResponseInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":701,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":702,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["controller",{"_index":28,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["converted",{"_index":978,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":545,"title":{},"body":{"classes/MailProcessor.html":{}}}],["corrupted",{"_index":970,"title":{},"body":{"index.html":{}}}],["count",{"_index":614,"title":{},"body":{"modules/QueueModule.html":{}}}],["coverage",{"_index":863,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":746,"title":{},"body":{"classes/UpdateUserDto.html":{},"index.html":{}}}],["credentials",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"modules/UploadModule.html":{}}}],["credentials'})@apiresponse({status",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto",{"_index":859,"title":{},"body":{"classes/Util.html":{}}}],["ctx",{"_index":659,"title":{},"body":{"classes/ResponseException.html":{}}}],["ctx.getrequest",{"_index":662,"title":{},"body":{"classes/ResponseException.html":{}}}],["ctx.getresponse",{"_index":661,"title":{},"body":{"classes/ResponseException.html":{}}}],["current",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["data",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"index.html":{}}}],["data')@apiresponse({status",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["data'})@apiresponse({status",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.bucketname",{"_index":780,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["data.key",{"_index":781,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["data.mimetype",{"_index":785,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["date",{"_index":731,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["date().toisostring",{"_index":687,"title":{},"body":{"classes/ResponseException.html":{}}}],["date.now",{"_index":704,"title":{},"body":{"classes/ResponseInterceptor.html":{},"injectables/UploadService.html":{}}}],["declarations",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["decoded",{"_index":981,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{}}}],["default",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"classes/MailProcessor.html":{},"modules/QueueModule.html":{},"classes/Util.html":{}}}],["defaultjoboptions",{"_index":610,"title":{},"body":{"modules/QueueModule.html":{}}}],["defaults",{"_index":506,"title":{},"body":{"modules/MailModule.html":{}}}],["define",{"_index":544,"title":{},"body":{"classes/MailProcessor.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["delay",{"_index":619,"title":{},"body":{"modules/QueueModule.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"properties.html":{}}}],["develop",{"_index":952,"title":{},"body":{"index.html":{}}}],["developer",{"_index":939,"title":{},"body":{"index.html":{}}}],["diagrams",{"_index":984,"title":{},"body":{"index.html":{}}}],["dir",{"_index":511,"title":{},"body":{"modules/MailModule.html":{}}}],["discovered",{"_index":974,"title":{},"body":{"index.html":{}}}],["displayname",{"_index":419,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["documentation",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["doesn’t",{"_index":975,"title":{},"body":{"index.html":{}}}],["done",{"_index":427,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":442,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto/account",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/change",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/forget",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/github",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/google",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/logout.dto",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["duration",{"_index":708,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["duration}ms",{"_index":714,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["during",{"_index":971,"title":{},"body":{"index.html":{}}}],["each",{"_index":954,"title":{},"body":{"index.html":{}}}],["email",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"classes/LoginDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{}}}],["email'})@apiparam({name",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["email_from",{"_index":509,"title":{},"body":{"modules/MailModule.html":{}}}],["emails",{"_index":418,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails?.[0]?.value",{"_index":421,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emailverified",{"_index":718,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["enqueueupload",{"_index":791,"title":{},"body":{"injectables/UploadService.html":{}}}],["enqueueupload(file",{"_index":797,"title":{},"body":{"injectables/UploadService.html":{}}}],["env",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["envfilepath",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":570,"title":{},"body":{"classes/MailProcessor.html":{},"classes/ResponseException.html":{},"classes/UploadProcessor.html":{}}}],["error('invalid",{"_index":558,"title":{},"body":{"classes/MailProcessor.html":{}}}],["error).message",{"_index":676,"title":{},"body":{"classes/ResponseException.html":{}}}],["errorresponse",{"_index":666,"title":{},"body":{"classes/ResponseException.html":{}}}],["errors",{"_index":670,"title":{},"body":{"classes/ResponseException.html":{}}}],["exception",{"_index":656,"title":{},"body":{"classes/ResponseException.html":{}}}],["exception.getresponse",{"_index":667,"title":{},"body":{"classes/ResponseException.html":{}}}],["exception.getstatus",{"_index":664,"title":{},"body":{"classes/ResponseException.html":{}}}],["exception.message",{"_index":681,"title":{},"body":{"classes/ResponseException.html":{}}}],["exceptionfilter",{"_index":651,"title":{},"body":{"classes/ResponseException.html":{}}}],["executioncontext",{"_index":694,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["exists",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists'})@apiresponse({status",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["exponential",{"_index":621,"title":{},"body":{"modules/QueueModule.html":{}}}],["export",{"_index":25,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["exports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["express",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UploadService.html":{}}}],["ext",{"_index":836,"title":{},"body":{"injectables/UploadService.html":{}}}],["extends",{"_index":387,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{}}}],["extract",{"_index":461,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["extractjwt",{"_index":454,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":463,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["faced",{"_index":966,"title":{},"body":{"index.html":{}}}],["failed",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"classes/ResponseException.html":{}}}],["false",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"classes/ResponseException.html":{}}}],["features",{"_index":964,"title":{},"body":{"index.html":{}}}],["field",{"_index":671,"title":{},"body":{"classes/ResponseException.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"index.html":{}}}],["file.buffer.tostring('base64",{"_index":830,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.mimetype",{"_index":822,"title":{},"body":{"injectables/UploadService.html":{}}}],["fileinterceptor",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["fileisrequired",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["filename",{"_index":801,"title":{},"body":{"injectables/UploadService.html":{}}}],["filenames",{"_index":833,"title":{},"body":{"injectables/UploadService.html":{}}}],["filetype",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["filetypevalidator",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["flow",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword(data",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassworddto",{"_index":141,"title":{"classes/ForgetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ForgetPasswordDto.html":{},"coverage.html":{}}}],["formatbytes",{"_index":884,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatbytes(bytes",{"_index":930,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formatted",{"_index":435,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["formatuptime",{"_index":885,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatuptime(seconds",{"_index":932,"title":{},"body":{"miscellaneous/functions.html":{}}}],["forum/platform",{"_index":950,"title":{},"body":{"index.html":{}}}],["forward",{"_index":441,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["found",{"_index":573,"title":{},"body":{"classes/MailProcessor.html":{}}}],["frontend",{"_index":959,"title":{},"body":{"index.html":{}}}],["function",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":927,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":985,"title":{},"body":{"index.html":{}}}],["generate",{"_index":825,"title":{},"body":{"injectables/UploadService.html":{}}}],["generated/prisma",{"_index":599,"title":{},"body":{"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["generatefilename",{"_index":792,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatefilename(filename",{"_index":799,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatenewtokens",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatenewtokens(@body",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatenewtokens(data",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["gentoken",{"_index":843,"title":{},"body":{"classes/Util.html":{}}}],["gentoken(byte",{"_index":845,"title":{},"body":{"classes/Util.html":{}}}],["get('github",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github')@useguards(undefined)@throttle({default",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github/callback",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github/callback')@useguards(undefined)@httpcode(httpstatus.ok)@throttle({default",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined)@throttle({default",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback')@useguards(undefined)@httpcode(httpstatus.ok)@throttle({default",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["getsysteminfojson",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getting",{"_index":934,"title":{"index.html":{}},"body":{}}],["github",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{}}}],["github2",{"_index":401,"title":{},"body":{"injectables/GithubStrategy.html":{},"dependencies.html":{}}}],["githubauth",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(@req",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(req",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["githublogindto",{"_index":263,"title":{"classes/GithubLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/GithubLoginDto.html":{},"coverage.html":{}}}],["githubstrategy",{"_index":353,"title":{"injectables/GithubStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GithubStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["global",{"_index":595,"title":{},"body":{"modules/PrismaModule.html":{},"modules/QueueModule.html":{}}}],["goal",{"_index":949,"title":{},"body":{"index.html":{}}}],["goals",{"_index":947,"title":{},"body":{"index.html":{}}}],["google",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["googleauth",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(@req",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(req",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogindto",{"_index":266,"title":{"classes/GoogleLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/GoogleLoginDto.html":{},"coverage.html":{}}}],["googlestrategy",{"_index":354,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["graph",{"_index":995,"title":{},"body":{"modules.html":{}}}],["handle",{"_index":976,"title":{},"body":{"index.html":{}}}],["handlebars",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":485,"title":{},"body":{"modules/MailModule.html":{}}}],["hash",{"_index":844,"title":{},"body":{"classes/Util.html":{}}}],["hash(text",{"_index":850,"title":{},"body":{"classes/Util.html":{}}}],["hashed",{"_index":854,"title":{},"body":{"classes/Util.html":{}}}],["helmet",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":951,"title":{},"body":{"index.html":{}}}],["host",{"_index":499,"title":{},"body":{"modules/MailModule.html":{},"modules/QueueModule.html":{},"classes/ResponseException.html":{}}}],["host.switchtohttp",{"_index":660,"title":{},"body":{"classes/ResponseException.html":{}}}],["httpcode",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.created",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":657,"title":{},"body":{"classes/ResponseException.html":{}}}],["httpstatus",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"classes/ResponseException.html":{}}}],["httpstatus.internal_server_error",{"_index":665,"title":{},"body":{"classes/ResponseException.html":{}}}],["id",{"_index":474,"title":{},"body":{"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["identifier",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["ijwtpayload",{"_index":444,"title":{"interfaces/IJwtPayload.html":{}},"body":{"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["image",{"_index":828,"title":{},"body":{"injectables/UploadService.html":{}}}],["image/gif",{"_index":818,"title":{},"body":{"injectables/UploadService.html":{}}}],["image/jpeg",{"_index":820,"title":{},"body":{"injectables/UploadService.html":{}}}],["image/jpg",{"_index":819,"title":{},"body":{"injectables/UploadService.html":{}}}],["image/png'].includes",{"_index":821,"title":{},"body":{"injectables/UploadService.html":{}}}],["implements",{"_index":650,"title":{},"body":{"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["import",{"_index":21,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["imports",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{}}}],["improvements",{"_index":986,"title":{},"body":{"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["info.ts",{"_index":883,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["initialize",{"_index":669,"title":{},"body":{"classes/ResponseException.html":{}}}],["initiate",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["initiates",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject",{"_index":402,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["inject('aws_s3",{"_index":775,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["injectable",{"_index":384,"title":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/UploadService.html":{}},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["injectables",{"_index":385,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/UploadService.html":{},"overview.html":{}}}],["injectqueue",{"_index":585,"title":{},"body":{"injectables/MailService.html":{},"injectables/UploadService.html":{}}}],["injectqueue('mailer",{"_index":586,"title":{},"body":{"injectables/MailService.html":{}}}],["injectqueue('uploader",{"_index":808,"title":{},"body":{"injectables/UploadService.html":{}}}],["input",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["install",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["instanceof",{"_index":663,"title":{},"body":{"classes/ResponseException.html":{}}}],["intercept",{"_index":692,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":693,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["interface",{"_index":443,"title":{"interfaces/IJwtPayload.html":{}},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":445,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["internal",{"_index":682,"title":{},"body":{"classes/ResponseException.html":{}}}],["invalid",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["isboolean",{"_index":742,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":726,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isdate",{"_index":743,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isdate()@isoptional",{"_index":732,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isdeleted",{"_index":719,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isemail",{"_index":641,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isemail()@isnotempty",{"_index":629,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isenum",{"_index":744,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isenum(userrole",{"_index":747,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isenum(userrole)@isoptional",{"_index":737,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isglobal",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":22,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isoptional",{"_index":745,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":23,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":17,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":633,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isstring()@isoptional",{"_index":729,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["job",{"_index":530,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{},"miscellaneous/typealiases.html":{}}}],["job.data.name",{"_index":568,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.reseturl",{"_index":569,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.to",{"_index":560,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.type",{"_index":556,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.username",{"_index":564,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.verificationlink",{"_index":565,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.year",{"_index":566,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.name",{"_index":553,"title":{},"body":{"classes/MailProcessor.html":{}}}],["join",{"_index":487,"title":{},"body":{"modules/MailModule.html":{}}}],["join(process.cwd",{"_index":512,"title":{},"body":{"modules/MailModule.html":{}}}],["jpg|jpeg|png|gif",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt",{"_index":455,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtaccessstrategy",{"_index":355,"title":{"injectables/JwtAccessStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtfromrequest",{"_index":462,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["jwtmodule",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshstrategy",{"_index":356,"title":{"injectables/JwtRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":458,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"index.html":{}}}],["knowledge",{"_index":956,"title":{},"body":{"index.html":{}}}],["learnings",{"_index":982,"title":{},"body":{"index.html":{}}}],["legend",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["license",{"_index":1002,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["literal",{"_index":581,"title":{},"body":{"injectables/MailService.html":{},"miscellaneous/typealiases.html":{}}}],["login",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["login'})@apiresponse({status",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(data",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["login.dto",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["login.dto.ts",{"_index":378,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:10",{"_index":381,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["login.dto.ts:14",{"_index":383,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["login.dto.ts:18",{"_index":382,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["login.dto.ts:6",{"_index":380,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["logindto",{"_index":183,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout'})@apiresponse({status",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@body",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(data",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutdto",{"_index":188,"title":{"classes/LogoutDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LogoutDto.html":{},"coverage.html":{}}}],["long",{"_index":637,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["m",{"_index":679,"title":{},"body":{"classes/ResponseException.html":{}}}],["mail",{"_index":514,"title":{},"body":{"modules/MailModule.html":{}}}],["mail.processor",{"_index":491,"title":{},"body":{"modules/MailModule.html":{}}}],["mail.service",{"_index":492,"title":{},"body":{"modules/MailModule.html":{}}}],["mailer",{"_index":495,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{}}}],["mailermodule",{"_index":482,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":496,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":525,"title":{},"body":{"classes/MailProcessor.html":{}}}],["mailjob",{"_index":528,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mailjobdata",{"_index":543,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mailmodule",{"_index":351,"title":{"modules/MailModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailprocessor",{"_index":490,"title":{"classes/MailProcessor.html":{}},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{},"coverage.html":{}}}],["mailqueue",{"_index":579,"title":{},"body":{"injectables/MailService.html":{}}}],["mailservice",{"_index":480,"title":{"injectables/MailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["many",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["map",{"_index":699,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["map((originalres",{"_index":706,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["match",{"_index":571,"title":{},"body":{"classes/MailProcessor.html":{},"classes/Util.html":{}}}],["match(text",{"_index":853,"title":{},"body":{"classes/Util.html":{}}}],["matching",{"_index":27,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["maxfilesizevalidator",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["maxsize",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["message",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"classes/RegisterUserDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["meta",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["metadata",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UploadService.html":{}}}],["methods",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["mime",{"_index":817,"title":{},"body":{"injectables/UploadService.html":{}}}],["mimetype",{"_index":831,"title":{},"body":{"injectables/UploadService.html":{}}}],["minimum",{"_index":634,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["minlength",{"_index":642,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["minlength(8",{"_index":646,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["minute",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["minutes",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["miscellaneous",{"_index":926,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["module",{"_index":50,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":484,"title":{},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":486,"title":{},"body":{"modules/MailModule.html":{}}}],["msg",{"_index":675,"title":{},"body":{"classes/ResponseException.html":{}}}],["msg.map((m",{"_index":678,"title":{},"body":{"classes/ResponseException.html":{}}}],["name",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RegisterUserDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["name?.familyname",{"_index":440,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name?.familyname?.tolowercase",{"_index":438,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name?.givenname",{"_index":439,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name?.givenname?.tolowercase",{"_index":436,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["nestinterceptor",{"_index":691,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["nestjs",{"_index":483,"title":{},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/bullmq",{"_index":534,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":741,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["networking",{"_index":953,"title":{},"body":{"index.html":{}}}],["new",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"classes/ResponseException.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"coverage.html":{},"index.html":{}}}],["newpassword",{"_index":371,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["news",{"_index":943,"title":{},"body":{"index.html":{}}}],["news/blogs",{"_index":957,"title":{},"body":{"index.html":{}}}],["next",{"_index":695,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":705,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["nextjs",{"_index":960,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":535,"title":{},"body":{"classes/MailProcessor.html":{}}}],["notfoundexception(`email",{"_index":572,"title":{},"body":{"classes/MailProcessor.html":{}}}],["null",{"_index":668,"title":{},"body":{"classes/ResponseException.html":{},"classes/UpdateUserDto.html":{}}}],["number",{"_index":503,"title":{},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["o.provider",{"_index":645,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["oauth",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["oauth20",{"_index":431,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":674,"title":{},"body":{"classes/ResponseException.html":{}}}],["objectives",{"_index":948,"title":{},"body":{"index.html":{}}}],["observable",{"_index":698,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["oldpassword",{"_index":372,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["operational",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["optional",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options",{"_index":517,"title":{},"body":{"modules/MailModule.html":{},"modules/QueueModule.html":{}}}],["originalres?.data",{"_index":709,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["originalres?.message",{"_index":710,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["originalres?.meta",{"_index":711,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["out",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["overcame",{"_index":973,"title":{},"body":{"index.html":{}}}],["overview",{"_index":937,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":888,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["param('email",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":407,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["parsefilepipe",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["partialtype",{"_index":740,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(registeruserdto",{"_index":717,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":405,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{}}}],["passport",{"_index":400,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":398,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["passportstrategy(strategy",{"_index":388,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["passreqtocallback",{"_index":468,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["password",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RegisterUserDto.html":{}}}],["password')@httpcode(httpstatus.ok)@throttle({default",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["password')@httpcode(httpstatus.ok)@useguards(undefined)@throttle({default",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["password'})@apiresponse({status",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto.ts",{"_index":370,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:10",{"_index":374,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:14",{"_index":373,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:6",{"_index":375,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["password_reset",{"_index":541,"title":{},"body":{"classes/MailProcessor.html":{}}}],["passwordresetemail",{"_index":575,"title":{},"body":{"injectables/MailService.html":{}}}],["passwordresetemail(data",{"_index":580,"title":{},"body":{"injectables/MailService.html":{}}}],["passwordresetmaildata",{"_index":540,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["path",{"_index":488,"title":{},"body":{"modules/MailModule.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"injectables/UploadService.html":{}}}],["path.extname(filename",{"_index":837,"title":{},"body":{"injectables/UploadService.html":{}}}],["payload",{"_index":453,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["per",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["photo",{"_index":422,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["photos",{"_index":420,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["photos?.[0]?.value",{"_index":423,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["port",{"_index":501,"title":{},"body":{"modules/MailModule.html":{},"modules/QueueModule.html":{}}}],["portal",{"_index":938,"title":{},"body":{"index.html":{}}}],["post",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["post('change",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('forget",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@httpcode(httpstatus.ok)@usepipes(new",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@httpcode(httpstatus.ok)@useguards(undefined)@throttle({default",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@httpcode(httpstatus.ok)@useguards(undefined)@usepipes(new",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@httpcode(httpstatus.created)@useinterceptors(undefined)@usepipes(new",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('resend",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('validate",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":962,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["prisma",{"_index":963,"title":{},"body":{"index.html":{}}}],["prisma.service",{"_index":596,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["prisma/prisma.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":598,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":62,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":593,"title":{"injectables/PrismaService.html":{}},"body":{"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":404,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["problem",{"_index":968,"title":{},"body":{"index.html":{}}}],["process",{"_index":523,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{}}}],["process(job",{"_index":527,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{}}}],["processor",{"_index":532,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{},"index.html":{}}}],["processor('mailer",{"_index":550,"title":{},"body":{"classes/MailProcessor.html":{}}}],["processor('uploader",{"_index":774,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["processors",{"_index":519,"title":{},"body":{"modules/MailModule.html":{}}}],["profile",{"_index":395,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profilepicture",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{}}}],["project",{"_index":936,"title":{},"body":{"index.html":{}}}],["promise",{"_index":531,"title":{},"body":{"classes/MailProcessor.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"interfaces/IJwtPayload.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadService.html":{},"properties.html":{}}}],["provide",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/UploadModule.html":{}}}],["provider",{"_index":628,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["providers",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["public",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MailService.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["putobjectcommand",{"_index":772,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["queue",{"_index":493,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"injectables/UploadService.html":{}}}],["queue/queue.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["queueing",{"_index":980,"title":{},"body":{"index.html":{}}}],["queuemodule",{"_index":63,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["quick",{"_index":988,"title":{},"body":{"index.html":{}}}],["randombytes",{"_index":858,"title":{},"body":{"classes/Util.html":{}}}],["randombytes(byte).tostring('hex",{"_index":862,"title":{},"body":{"classes/Util.html":{}}}],["readonly",{"_index":10,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["redirect",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{}}}],["refresh.strategy.ts",{"_index":464,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:25",{"_index":466,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy.ts:8",{"_index":465,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refreshed",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":720,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["refreshtokendto",{"_index":153,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenexp",{"_index":721,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["region",{"_index":761,"title":{},"body":{"modules/UploadModule.html":{}}}],["register",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"modules/QueueModule.html":{}}}],["register(data",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered'})@apiresponse({status",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruserdto",{"_index":194,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["registration",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["removeoncomplete",{"_index":611,"title":{},"body":{"modules/QueueModule.html":{}}}],["removeonfail",{"_index":616,"title":{},"body":{"modules/QueueModule.html":{}}}],["reply",{"_index":507,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["req",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["request.url",{"_index":688,"title":{},"body":{"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["requests",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["requesttimeoutexception",{"_index":773,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["requesttimeoutexception(error",{"_index":787,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["resend",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["resendaccountverify",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["resendaccountverify(email",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["reset'})@apiresponse({status",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset.hbs",{"_index":567,"title":{},"body":{"classes/MailProcessor.html":{}}}],["resetpassword",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(@body",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(data",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassworddto",{"_index":219,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resettoken",{"_index":722,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["resettokenexp",{"_index":723,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reseturl",{"_index":542,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["response",{"_index":658,"title":{},"body":{"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["response.status(status).json",{"_index":684,"title":{},"body":{"classes/ResponseException.html":{}}}],["response.statuscode",{"_index":707,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["response_time",{"_index":713,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["responseexception",{"_index":648,"title":{"classes/ResponseException.html":{}},"body":{"classes/ResponseException.html":{},"coverage.html":{}}}],["responseinterceptor",{"_index":689,"title":{"classes/ResponseInterceptor.html":{}},"body":{"classes/ResponseInterceptor.html":{},"coverage.html":{}}}],["results",{"_index":26,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"classes/ResponseInterceptor.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["returns",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":724,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["rxjs",{"_index":700,"title":{},"body":{"classes/ResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":756,"title":{},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"dependencies.html":{}}}],["s3client",{"_index":753,"title":{},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{}}}],["scope",{"_index":415,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["screenshots",{"_index":983,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["sdk/client",{"_index":755,"title":{},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"dependencies.html":{}}}],["seconds",{"_index":933,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":457,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["secretaccesskey",{"_index":765,"title":{},"body":{"modules/UploadModule.html":{}}}],["secretorkey",{"_index":459,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["send",{"_index":548,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["sendaccountverifyemail",{"_index":576,"title":{},"body":{"injectables/MailService.html":{}}}],["sendaccountverifyemail(data",{"_index":583,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["sent'})@apiresponse({status",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["serialization",{"_index":967,"title":{},"body":{"index.html":{}}}],["server",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"classes/ResponseException.html":{}}}],["service",{"_index":403,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["services",{"_index":521,"title":{},"body":{"modules/MailModule.html":{}}}],["set",{"_index":546,"title":{},"body":{"classes/MailProcessor.html":{}}}],["setup",{"_index":494,"title":{},"body":{"modules/MailModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["src",{"_index":513,"title":{},"body":{"modules/MailModule.html":{}}}],["src/.../mail.processor.ts",{"_index":1007,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":928,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../system",{"_index":929,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:106",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:118",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:135",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:147",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:164",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:187",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:207",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:228",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:251",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:274",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:300",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:318",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:72",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":870,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/account",{"_index":6,"title":{},"body":{"classes/AccountVerifyDto.html":{},"coverage.html":{}}}],["src/auth/dto/change",{"_index":369,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/create",{"_index":627,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/forget",{"_index":376,"title":{},"body":{"classes/ForgetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/github",{"_index":377,"title":{},"body":{"classes/GithubLoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/google",{"_index":424,"title":{},"body":{"classes/GoogleLoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":469,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/logout.dto.ts",{"_index":473,"title":{},"body":{"classes/LogoutDto.html":{},"coverage.html":{}}}],["src/auth/dto/logout.dto.ts:6",{"_index":475,"title":{},"body":{"classes/LogoutDto.html":{}}}],["src/auth/dto/refresh",{"_index":623,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/reset",{"_index":647,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":716,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/strategies/github.strategy.ts",{"_index":386,"title":{},"body":{"injectables/GithubStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/github.strategy.ts:21",{"_index":396,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["src/auth/strategies/github.strategy.ts:7",{"_index":391,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts",{"_index":425,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts:22",{"_index":429,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:7",{"_index":426,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/jwt",{"_index":448,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["src/auth/types/index.ts",{"_index":446,"title":{},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{}}}],["src/common/response.exception.ts",{"_index":649,"title":{},"body":{"classes/ResponseException.html":{},"coverage.html":{}}}],["src/common/response.exception.ts:12",{"_index":655,"title":{},"body":{"classes/ResponseException.html":{}}}],["src/common/response.interceptor.ts",{"_index":690,"title":{},"body":{"classes/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/response.interceptor.ts:5",{"_index":697,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["src/mail/mail.module",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/mail/mail.module.ts",{"_index":481,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.processor.ts",{"_index":522,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/mail/mail.processor.ts:30",{"_index":526,"title":{},"body":{"classes/MailProcessor.html":{}}}],["src/mail/mail.processor.ts:35",{"_index":529,"title":{},"body":{"classes/MailProcessor.html":{}}}],["src/mail/mail.service.ts",{"_index":574,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:13",{"_index":584,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:23",{"_index":582,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:6",{"_index":578,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":879,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":594,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":597,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/queue/queue.module",{"_index":489,"title":{},"body":{"modules/MailModule.html":{}}}],["src/queue/queue.module.ts",{"_index":600,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/upload/upload.module",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/upload/upload.module.ts",{"_index":752,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/upload/upload.processor.ts",{"_index":768,"title":{},"body":{"classes/UploadProcessor.html":{},"coverage.html":{}}}],["src/upload/upload.processor.ts:15",{"_index":771,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["src/upload/upload.processor.ts:7",{"_index":770,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["src/upload/upload.service.ts",{"_index":788,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/upload/upload.service.ts:10",{"_index":804,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:11",{"_index":795,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:27",{"_index":798,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:48",{"_index":800,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:55",{"_index":803,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/utils/system",{"_index":882,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/util",{"_index":807,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/utils/util.ts",{"_index":841,"title":{},"body":{"classes/Util.html":{},"coverage.html":{}}}],["src/utils/util.ts:13",{"_index":846,"title":{},"body":{"classes/Util.html":{}}}],["src/utils/util.ts:5",{"_index":851,"title":{},"body":{"classes/Util.html":{}}}],["src/utils/util.ts:9",{"_index":855,"title":{},"body":{"classes/Util.html":{}}}],["stack",{"_index":958,"title":{},"body":{"index.html":{}}}],["started",{"_index":935,"title":{"index.html":{}},"body":{}}],["starttime",{"_index":703,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["statements",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":842,"title":{},"body":{"classes/Util.html":{}}}],["status",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"classes/ResponseException.html":{}}}],["status_code",{"_index":712,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["statuscode",{"_index":685,"title":{},"body":{"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["strategies/github.strategy",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/google.strategy",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":399,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["strict",{"_index":518,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["sub",{"_index":447,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["subject",{"_index":561,"title":{},"body":{"classes/MailProcessor.html":{}}}],["success",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["successful",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/ResponseInterceptor.html":{}}}],["successful'})@apiresponse({status",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully'})@apiresponse({status",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["suggestions",{"_index":945,"title":{},"body":{"index.html":{}}}],["summary",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":408,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{}}}],["support",{"_index":992,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":824,"title":{},"body":{"injectables/UploadService.html":{}}}],["svg",{"_index":993,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":552,"title":{},"body":{"classes/MailProcessor.html":{}}}],["table",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["tech",{"_index":942,"title":{},"body":{"index.html":{}}}],["template",{"_index":510,"title":{},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{}}}],["templates",{"_index":515,"title":{},"body":{"modules/MailModule.html":{}}}],["text",{"_index":852,"title":{},"body":{"classes/Util.html":{}}}],["this.authservice.changepassword(data",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.forgetpassword(data",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.githublogin(req.user",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.googlelogin(req.user",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginuser(data",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(data",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(data",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.registeruser(data",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resendaccountverification(email",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(data",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateaccountverifyemail(data",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.bucketname",{"_index":814,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.cloudfronturl",{"_index":811,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.cloudfronturl}/${filename",{"_index":840,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.config.get",{"_index":812,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.config.get('aws_public_bucket",{"_index":815,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.enqueueupload(file",{"_index":839,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.generatefilename(file.originalname",{"_index":826,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.mailerservice.sendmail",{"_index":559,"title":{},"body":{"classes/MailProcessor.html":{}}}],["this.mailqueue.add('account",{"_index":588,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailqueue.add('reset",{"_index":589,"title":{},"body":{"injectables/MailService.html":{}}}],["this.s3.send(command",{"_index":786,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["this.uploadqueue.add('upload",{"_index":827,"title":{},"body":{"injectables/UploadService.html":{}}}],["throttle",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["throttlerguard",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlers",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":557,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["time",{"_index":549,"title":{},"body":{"classes/MailProcessor.html":{}}}],["timestamp",{"_index":686,"title":{},"body":{"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["token",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["token'})@apiresponse({status",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto.ts",{"_index":624,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:10",{"_index":625,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto.ts:6",{"_index":626,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["tokens",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["topics",{"_index":944,"title":{},"body":{"index.html":{}}}],["transform",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["transformer",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":498,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"classes/ResponseInterceptor.html":{}}}],["try",{"_index":777,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["ttl",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1005,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":673,"title":{},"body":{"classes/ResponseException.html":{}}}],["types",{"_index":456,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["uid",{"_index":11,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["unauthorized",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":672,"title":{},"body":{"classes/ResponseException.html":{}}}],["undefined})@apibearerauth()@apioperation({summary",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apioperation({summary",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["unique",{"_index":832,"title":{},"body":{"injectables/UploadService.html":{}}}],["unknown",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{}}}],["unlicensed",{"_index":1003,"title":{},"body":{"properties.html":{}}}],["up",{"_index":990,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":715,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["upload",{"_index":776,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["upload.processor",{"_index":758,"title":{},"body":{"modules/UploadModule.html":{}}}],["upload.service",{"_index":759,"title":{},"body":{"modules/UploadModule.html":{}}}],["uploadandgeturl",{"_index":793,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadandgeturl(file",{"_index":802,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadedfile",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["uploader",{"_index":608,"title":{},"body":{"modules/QueueModule.html":{},"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":352,"title":{"modules/UploadModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadprocessor",{"_index":757,"title":{"classes/UploadProcessor.html":{}},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"coverage.html":{}}}],["uploadqueue",{"_index":796,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploads",{"_index":972,"title":{},"body":{"index.html":{}}}],["uploadservice",{"_index":751,"title":{"injectables/UploadService.html":{}},"body":{"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"overview.html":{}}}],["upvote/downvote",{"_index":946,"title":{},"body":{"index.html":{}}}],["url",{"_index":810,"title":{},"body":{"injectables/UploadService.html":{}}}],["use",{"_index":520,"title":{},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{}}}],["useclass",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":497,"title":{},"body":{"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{}}}],["useguards",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('access",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('github",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('google",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('refresh",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(fileinterceptor('profilepicture",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes(new",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"modules/MailModule.html":{},"index.html":{}}}],["user'})@apiconsumes('multipart/form",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":470,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":640,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:15",{"_index":738,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":631,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:19",{"_index":730,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:21",{"_index":630,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:23",{"_index":733,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":739,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:29",{"_index":638,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:31",{"_index":639,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:35",{"_index":734,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:39",{"_index":735,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:43",{"_index":728,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:46",{"_index":727,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:6",{"_index":471,"title":{},"body":{"classes/LoginDto.html":{}}}],["user.dto.ts:9",{"_index":472,"title":{},"body":{"classes/LoginDto.html":{}}}],["user:email",{"_index":416,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["username",{"_index":379,"title":{},"body":{"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{}}}],["userrole",{"_index":736,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["users",{"_index":940,"title":{},"body":{"index.html":{}}}],["util",{"_index":806,"title":{"classes/Util.html":{}},"body":{"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{}}}],["util.gentoken(16",{"_index":835,"title":{},"body":{"injectables/UploadService.html":{}}}],["utils/system",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["uuid",{"_index":834,"title":{},"body":{"injectables/UploadService.html":{}}}],["uuid}${ext",{"_index":838,"title":{},"body":{"injectables/UploadService.html":{}}}],["validate",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["validate(_accesstoken",{"_index":393,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":451,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["validateaccount",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateaccount(@body",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateaccount(data",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateif",{"_index":643,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["validateif((o",{"_index":644,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["validateif(o",{"_index":632,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["validation",{"_index":680,"title":{},"body":{"classes/ResponseException.html":{}}}],["validationpipe",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["validationpipe())@throttle({default",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["validator",{"_index":24,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["validators",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["valuable",{"_index":955,"title":{},"body":{"index.html":{}}}],["value",{"_index":847,"title":{},"body":{"classes/Util.html":{}}}],["values",{"_index":406,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["verification",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"classes/MailProcessor.html":{}}}],["verification'})@apiresponse({status",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationlink",{"_index":538,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["verificationmaildata",{"_index":537,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verified",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify",{"_index":555,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["verify.dto",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify.dto.ts",{"_index":7,"title":{},"body":{"classes/AccountVerifyDto.html":{},"coverage.html":{}}}],["verify.dto.ts:6",{"_index":20,"title":{},"body":{"classes/AccountVerifyDto.html":{}}}],["verify.dto.ts:9",{"_index":19,"title":{},"body":{"classes/AccountVerifyDto.html":{}}}],["verify.hbs",{"_index":562,"title":{},"body":{"classes/MailProcessor.html":{}}}],["verify/:email",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify/:email')@httpcode(httpstatus.ok)@throttle({default",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifycallback",{"_index":428,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["verifytoken",{"_index":12,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/UpdateUserDto.html":{}}}],["verifytokenexp",{"_index":725,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["version",{"_index":1000,"title":{},"body":{"properties.html":{}}}],["void",{"_index":430,"title":{},"body":{"injectables/GoogleStrategy.html":{},"classes/ResponseException.html":{}}}],["well",{"_index":977,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["workerhost",{"_index":533,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{}}}],["wrap",{"_index":989,"title":{},"body":{"index.html":{}}}],["year",{"_index":539,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["zoom",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccountVerifyDto.html":{"url":"classes/AccountVerifyDto.html","title":"class - AccountVerifyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountVerifyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/account-verify.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                uid\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/account-verify.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        verifyToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/account-verify.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AccountVerifyDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly verifyToken: string;\n  @IsString()\n  @IsNotEmpty()\n  readonly uid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { success: boolean; message: string; meta: any; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\nimport { getSystemInfoJson } from './utils/system-info';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n  constructor() {}\n\n  @Get()\n  getHello() {\n    return {\n      success: true,\n      message: 'Server is operational',\n      meta: getSystemInfoJson(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            QueueModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { QueueModule } from './queue/queue.module';\n\n@Module({\n  imports: [\n    ThrottlerModule.forRoot({\n      throttlers: [\n        {\n          ttl: 60,\n          limit: 100,\n        },\n      ],\n    }),\n    QueueModule,\n    PrismaModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      isGlobal: true,\n    }),\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                forgetPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                generateNewTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                githubAuth\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                githubAuthCallback\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                googleAuth\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                googleAuthCallback\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                logOut\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                resendAccountVerify\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                validateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(data: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@HttpCode(HttpStatus.OK)@UseGuards(undefined)@Throttle({default: undefined})@ApiBearerAuth()@ApiOperation({summary: 'Change user password'})@ApiResponse({status: 200, description: 'Password changed successfully'})@ApiResponse({status: 401, description: 'Unauthorized - invalid token'})@ApiResponse({status: 400, description: 'Invalid current password or new password'})@ApiResponse({status: 429, description: 'Too many password change attempts'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:300\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        forgetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgetPassword(data: ForgetPasswordDto, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('forget-password')@HttpCode(HttpStatus.OK)@Throttle({default: undefined})@ApiOperation({summary: 'Request password reset'})@ApiResponse({status: 200, description: 'Password reset email sent'})@ApiResponse({status: 400, description: 'Invalid email address'})@ApiResponse({status: 429, description: 'Too many password reset attempts'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:251\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            ForgetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        generateNewTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateNewTokens(data: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@HttpCode(HttpStatus.OK)@UseGuards(undefined)@UsePipes(new ValidationPipe())@Throttle({default: undefined})@ApiBearerAuth()@ApiOperation({summary: 'Refresh access token'})@ApiResponse({status: 200, description: 'Tokens refreshed successfully'})@ApiResponse({status: 401, description: 'Invalid refresh token'})@ApiResponse({status: 429, description: 'Too many refresh attempts'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        githubAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    githubAuth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github')@UseGuards(undefined)@Throttle({default: undefined})@ApiOperation({summary: 'Initiate GitHub OAuth login'})@ApiResponse({status: 302, description: 'Redirect to GitHub OAuth'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:147\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        githubAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    githubAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/callback')@UseGuards(undefined)@HttpCode(HttpStatus.OK)@Throttle({default: undefined})@ApiOperation({summary: 'GitHub OAuth callback'})@ApiResponse({status: 200, description: 'GitHub login successful'})@ApiResponse({status: 401, description: 'GitHub authentication failed'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)@Throttle({default: undefined})@ApiOperation({summary: 'Initiate Google OAuth login'})@ApiResponse({status: 302, description: 'Redirect to Google OAuth'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        googleAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/callback')@UseGuards(undefined)@HttpCode(HttpStatus.OK)@Throttle({default: undefined})@ApiOperation({summary: 'Google OAuth callback'})@ApiResponse({status: 200, description: 'Google login successful'})@ApiResponse({status: 401, description: 'Google authentication failed'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(data: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)@UsePipes(new ValidationPipe())@Throttle({default: undefined})@ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Login successful'})@ApiResponse({status: 401, description: 'Invalid credentials'})@ApiResponse({status: 429, description: 'Too many login attempts'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    logOut(data: LogoutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@HttpCode(HttpStatus.OK)@UseGuards(undefined)@Throttle({default: undefined})@ApiBearerAuth()@ApiOperation({summary: 'User logout'})@ApiResponse({status: 200, description: 'Logout successful'})@ApiResponse({status: 401, description: 'Unauthorized - invalid token'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:318\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            LogoutDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(data: RegisterUserDto, profilePicture: Express.Multer.File, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@HttpCode(HttpStatus.CREATED)@UseInterceptors(undefined)@UsePipes(new ValidationPipe())@Throttle({default: undefined})@ApiOperation({summary: 'Register a new user'})@ApiConsumes('multipart/form-data')@ApiResponse({status: 201, description: 'User successfully registered'})@ApiResponse({status: 400, description: 'Invalid input data'})@ApiResponse({status: 409, description: 'User already exists'})@ApiResponse({status: 429, description: 'Too many registration attempts'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profilePicture\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        resendAccountVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    resendAccountVerify(email: string, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-verify/:email')@HttpCode(HttpStatus.OK)@Throttle({default: undefined})@ApiOperation({summary: 'Resend account verification email'})@ApiParam({name: 'email', description: 'User email address'})@ApiResponse({status: 200, description: 'Verification email sent'})@ApiResponse({status: 400, description: 'Invalid email address'})@ApiResponse({status: 429, description: 'Too many resend attempts'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:228\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(data: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')@HttpCode(HttpStatus.OK)@Throttle({default: undefined})@ApiOperation({summary: 'Reset password with token'})@ApiResponse({status: 200, description: 'Password reset successfully'})@ApiResponse({status: 400, description: 'Invalid reset token or password'})@ApiResponse({status: 429, description: 'Too many reset attempts'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:274\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        validateAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateAccount(data: AccountVerifyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('validate-account')@HttpCode(HttpStatus.OK)@Throttle({default: undefined})@ApiOperation({summary: 'Validate account verification'})@ApiResponse({status: 200, description: 'Account verified successfully'})@ApiResponse({status: 400, description: 'Invalid verification token'})@ApiResponse({status: 429, description: 'Too many verification attempts'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:207\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            AccountVerifyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  FileTypeValidator,\n  Get,\n  HttpCode,\n  HttpStatus,\n  MaxFileSizeValidator,\n  Param,\n  ParseFilePipe,\n  Post,\n  Req,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\nimport {\n  ApiBearerAuth,\n  ApiConsumes,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Throttle } from '@nestjs/throttler';\nimport { Request } from 'express';\nimport { AuthService } from './auth.service';\nimport { AccountVerifyDto } from './dto/account-verify.dto';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { RegisterUserDto } from './dto/create-user.dto';\nimport { ForgetPasswordDto } from './dto/forget-password.dto';\nimport { GithubLoginDto } from './dto/github-login.dto';\nimport { GoogleLoginDto } from './dto/google-login.dto';\nimport { LoginDto } from './dto/login-user.dto';\nimport { LogoutDto } from './dto/logout.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  @HttpCode(HttpStatus.CREATED)\n  @UseInterceptors(FileInterceptor('profilePicture'))\n  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))\n  @Throttle({ default: { limit: 5, ttl: 60000 } }) // 5 requests per minute\n  @ApiOperation({ summary: 'Register a new user' })\n  @ApiConsumes('multipart/form-data')\n  @ApiResponse({\n    status: 201,\n    description: 'User successfully registered',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid input data',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'User already exists',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many registration attempts',\n  })\n  public async register(\n    @Body() data: RegisterUserDto,\n    @UploadedFile(\n      new ParseFilePipe({\n        validators: [\n          new MaxFileSizeValidator({ maxSize: 2 * 1024 * 1024 }), // 2MB\n          new FileTypeValidator({ fileType: /(jpg|jpeg|png|gif)$/ }),\n        ],\n        fileIsRequired: false,\n      }),\n    )\n    profilePicture: Express.Multer.File,\n    @Req() req: Request,\n  ) {\n    return this.authService.registerUser(data, profilePicture, req);\n  }\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))\n  @Throttle({ default: { limit: 10, ttl: 60000 } }) // 10 requests per minute\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Invalid credentials',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many login attempts',\n  })\n  public async login(@Body() data: LoginDto) {\n    return this.authService.loginUser(data);\n  }\n\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  @Throttle({ default: { limit: 20, ttl: 60000 } })\n  @ApiOperation({ summary: 'Initiate Google OAuth login' })\n  @ApiResponse({\n    status: 302,\n    description: 'Redirect to Google OAuth',\n  })\n  public async googleAuth() {\n    // This method initiates Google OAuth flow\n  }\n\n  @Get('google/callback')\n  @UseGuards(AuthGuard('google'))\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 20, ttl: 60000 } })\n  @ApiOperation({ summary: 'Google OAuth callback' })\n  @ApiResponse({\n    status: 200,\n    description: 'Google login successful',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Google authentication failed',\n  })\n  public async googleAuthCallback(@Req() req: Request) {\n    return this.authService.googleLogin(req.user as GoogleLoginDto);\n  }\n\n  @Get('github')\n  @UseGuards(AuthGuard('github'))\n  @Throttle({ default: { limit: 20, ttl: 60000 } })\n  @ApiOperation({ summary: 'Initiate GitHub OAuth login' })\n  @ApiResponse({\n    status: 302,\n    description: 'Redirect to GitHub OAuth',\n  })\n  public async githubAuth() {\n    // This method initiates GitHub OAuth flow\n  }\n\n  @Get('github/callback')\n  @UseGuards(AuthGuard('github'))\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 20, ttl: 60000 } })\n  @ApiOperation({ summary: 'GitHub OAuth callback' })\n  @ApiResponse({\n    status: 200,\n    description: 'GitHub login successful',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'GitHub authentication failed',\n  })\n  public async githubAuthCallback(@Req() req: Request) {\n    return this.authService.githubLogin(req.user as GithubLoginDto);\n  }\n\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(AuthGuard('refresh'))\n  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))\n  @Throttle({ default: { limit: 20, ttl: 60000 } })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiResponse({\n    status: 200,\n    description: 'Tokens refreshed successfully',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Invalid refresh token',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many refresh attempts',\n  })\n  public async generateNewTokens(@Body() data: RefreshTokenDto) {\n    return this.authService.refreshToken(data);\n  }\n\n  @Post('validate-account')\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 10, ttl: 60000 } })\n  @ApiOperation({ summary: 'Validate account verification' })\n  @ApiResponse({\n    status: 200,\n    description: 'Account verified successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid verification token',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many verification attempts',\n  })\n  public async validateAccount(@Body() data: AccountVerifyDto) {\n    return this.authService.validateAccountVerifyEmail(data);\n  }\n\n  @Post('resend-verify/:email')\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 3, ttl: 300000 } }) // 3 requests per 5 minutes\n  @ApiOperation({ summary: 'Resend account verification email' })\n  @ApiParam({ name: 'email', description: 'User email address' })\n  @ApiResponse({\n    status: 200,\n    description: 'Verification email sent',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid email address',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many resend attempts',\n  })\n  public async resendAccountVerify(\n    @Param('email') email: string,\n    @Req() req: Request,\n  ) {\n    return this.authService.resendAccountVerification(email, req);\n  }\n\n  @Post('forget-password')\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 3, ttl: 300000 } }) // 3 requests per 5 minutes\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset email sent',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid email address',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many password reset attempts',\n  })\n  public async forgetPassword(\n    @Body() data: ForgetPasswordDto,\n    @Req() req: Request,\n  ) {\n    return this.authService.forgetPassword(data, req);\n  }\n\n  @Post('reset-password')\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 5, ttl: 300000 } }) // 5 requests per 5 minutes\n  @ApiOperation({ summary: 'Reset password with token' })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid reset token or password',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many reset attempts',\n  })\n  public async resetPassword(@Body() data: ResetPasswordDto) {\n    return this.authService.resetPassword(data);\n  }\n\n  @Post('change-password')\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(AuthGuard('access'))\n  @Throttle({ default: { limit: 5, ttl: 300000 } }) // 5 requests per 5 minutes\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Change user password' })\n  @ApiResponse({\n    status: 200,\n    description: 'Password changed successfully',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid token',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid current password or new password',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many password change attempts',\n  })\n  public async changePassword(@Body() data: ChangePasswordDto) {\n    return this.authService.changePassword(data);\n  }\n\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(AuthGuard('access'))\n  @Throttle({ default: { limit: 10, ttl: 60000 } })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'User logout' })\n  @ApiResponse({\n    status: 200,\n    description: 'Logout successful',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid token',\n  })\n  public async logOut(@Body() data: LogoutDto) {\n    return this.authService.logOut(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAuthModule -->\n\nUploadModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGithubStrategy\n\nGithubStrategy\n\nAuthModule -->\n\nGithubStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtAccessStrategy\n\nJwtAccessStrategy\n\nAuthModule -->\n\nJwtAccessStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GithubStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtAccessStrategy\n                        \n                        \n                            JwtRefreshStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            UploadModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MailModule } from 'src/mail/mail.module';\nimport { UploadModule } from 'src/upload/upload.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { GithubStrategy } from './strategies/github.strategy';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { JwtAccessStrategy } from './strategies/jwt-access.strategy';\nimport { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';\n\n@Module({\n  imports: [UploadModule, JwtModule.register({}), MailModule],\n  providers: [\n    AuthService,\n    JwtAccessStrategy,\n    JwtRefreshStrategy,\n    GoogleStrategy,\n    GithubStrategy,\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                oldPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                uid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly uid: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly oldPassword: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgetPasswordDto.html":{"url":"classes/ForgetPasswordDto.html","title":"class - ForgetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/forget-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/forget-password.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class ForgetPasswordDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GithubLoginDto.html":{"url":"classes/GithubLoginDto.html","title":"class - GithubLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GithubLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/github-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                profilePicture\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/github-login.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/github-login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profilePicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/github-login.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/github-login.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GithubLoginDto {\n  @IsString()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  profilePicture: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubStrategy.html":{"url":"injectables/GithubStrategy.html","title":"injectable - GithubStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/github.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'github')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/github.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(_accessToken: string, _refreshToken: string, profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/github.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-github2';\n\n@Injectable()\nexport class GithubStrategy extends PassportStrategy(Strategy, 'github') {\n  constructor(\n    //inject config service\n    private config: ConfigService,\n  ) {\n    //pass values to parent class\n    super({\n      clientID: config.get('GITHUB_CLIENT_ID') as string,\n      clientSecret: config.get('GITHUB_CLIENT_SECRET') as string,\n      callbackURL: config.get('GITHUB_CALLBACK_URL') as string,\n      scope: ['user:email'],\n    });\n  }\n  //validate user\n  validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: Profile,\n  ): unknown {\n    const { username, emails, displayName, photos } = profile;\n    const email = emails?.[0]?.value;\n    const photo = photos?.[0]?.value;\n    //return user\n    return {\n      username,\n      email,\n      profilePicture: photo,\n      name: displayName,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleLoginDto.html":{"url":"classes/GoogleLoginDto.html","title":"class - GoogleLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/google-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                profilePicture\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/google-login.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/google-login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profilePicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/google-login.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/google-login.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GoogleLoginDto {\n  @IsString()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  profilePicture: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(_accessToken: string, _refreshToken: string, profile: Profile, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google.strategy.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy, VerifyCallback } from 'passport-google-oauth20';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(\n    //inject config service\n    private config: ConfigService,\n  ) {\n    //pass values to parent class\n    super({\n      clientID: config.get('GOOGLE_CLIENT_ID') as string,\n      clientSecret: config.get('GOOGLE_CLIENT_SECRET') as string,\n      callbackURL: config.get('GOOGLE_CALLBACK_URL') as string,\n      scope: ['email', 'profile'],\n    });\n  }\n\n  //validate user\n  validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: Profile,\n    done: VerifyCallback,\n  ): void {\n    const { name, emails, photos } = profile;\n    //formatted user\n    const user = {\n      email: emails?.[0]?.value,\n      username:\n        name?.givenName?.toLowerCase() + '_' + name?.familyName?.toLowerCase(),\n      name: name?.givenName + ' ' + name?.familyName,\n      profilePicture: photos?.[0]?.value,\n    };\n    //forward to callback\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJwtPayload.html":{"url":"interfaces/IJwtPayload.html","title":"interface - IJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/types/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IJwtPayload {\n  sub: string;\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAccessStrategy.html":{"url":"injectables/JwtAccessStrategy.html","title":"injectable - JwtAccessStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAccessStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-access.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'access')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-access.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt-access.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IJwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IJwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { IJwtPayload } from '../types';\n\n@Injectable()\nexport class JwtAccessStrategy extends PassportStrategy(Strategy, 'access') {\n  constructor(\n    //inject config service\n    private config: ConfigService,\n  ) {\n    //pass env values to parent class\n    super({\n      //secret key\n      secretOrKey: config.get('ACCESS_TOKEN_SECRET') as string,\n      //extract jwt from request\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  //validate and return the payload\n  validate(payload: IJwtPayload): IJwtPayload {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshStrategy.html":{"url":"injectables/JwtRefreshStrategy.html","title":"injectable - JwtRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'refresh')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-refresh.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt-refresh.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IJwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IJwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { IJwtPayload } from '../types';\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(Strategy, 'refresh') {\n  constructor(\n    //inject config service\n    private config: ConfigService,\n  ) {\n    //pass env values to parent class\n    super({\n      //secret key\n      secretOrKey: config.get('REFRESH_TOKEN_SECRET') as string,\n      //extract jwt from request\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      // pass request to callback\n      passReqToCallback: true,\n    });\n  }\n\n  //validate and return the payload\n  validate(payload: IJwtPayload): IJwtPayload {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly email: string;\n  @IsString()\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogoutDto.html":{"url":"classes/LogoutDto.html","title":"class - LogoutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogoutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logout.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logout.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class LogoutDto {\n  @IsString()\n  @IsNotEmpty()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_imports\n\n\n\n\nQueueModule\n\nQueueModule\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nQueueModule->MailModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            QueueModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'path';\nimport { QueueModule } from 'src/queue/queue.module';\nimport { MailProcessor } from './mail.processor';\nimport { MailService } from './mail.service';\n\n@Module({\n  imports: [\n    //import queue module\n    QueueModule,\n    //setup mailer module\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        transport: {\n          host: config.get('EMAIL_HOST') as string,\n          port: config.get('EMAIL_PORT') as number,\n          auth: {\n            user: config.get('EMAIL_USER') as string,\n            pass: config.get('EMAIL_PASS') as string,\n          },\n        },\n        defaults: {\n          from: `\"No Reply - console.log\" ('EMAIL_FROM')}>`,\n        },\n        template: {\n          dir: join(process.cwd(), 'src', 'mail', 'templates'),\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n    }),\n  ],\n  //inject mail service and processors\n  providers: [MailService, MailProcessor],\n  //export for use in other services\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MailProcessor.html":{"url":"classes/MailProcessor.html","title":"class - MailProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MailProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.processor.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: MailJob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.processor.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                            MailJob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { NotFoundException } from '@nestjs/common';\nimport { Job } from 'bullmq';\n\nexport type VerificationMailData = {\n  type: 'verification';\n  to: string;\n  userName: string;\n  verificationLink: string;\n  year: number;\n};\n\nexport type PasswordResetMailData = {\n  type: 'password_reset';\n  to: string;\n  name: string;\n  resetUrl: string;\n};\n\nexport type MailJobData = VerificationMailData | PasswordResetMailData;\n\n// Define job types with their corresponding data\nexport type MailJob =\n  | Job\n  | Job;\n\n//define processor and set concurrency(can send 10 email at a time) at 10\n@Processor('mailer', { concurrency: 10 })\nexport class MailProcessor extends WorkerHost {\n  constructor(private mailerService: MailerService) {\n    super();\n  }\n  //use process for job process\n  async process(job: MailJob): Promise {\n    switch (job.name) {\n      case 'account-verify-email': {\n        if (job.data.type !== 'verification') {\n          throw new Error('Invalid data type for verification email');\n        }\n        return this.mailerService.sendMail({\n          to: job.data.to,\n          subject: 'Verify Your Email!',\n          template: 'account-verify.hbs',\n          context: {\n            userName: job.data.userName,\n            verificationLink: job.data.verificationLink,\n            year: job.data.year,\n          },\n        });\n      }\n\n      case 'reset-password-email': {\n        if (job.data.type !== 'password_reset') {\n          throw new Error('Invalid data type for password reset email');\n        }\n        return this.mailerService.sendMail({\n          to: job.data.to,\n          subject: 'Password Reset Request!',\n          template: 'password-reset.hbs',\n          context: {\n            userName: job.data.name,\n            verificationLink: job.data.resetUrl,\n          },\n        });\n      }\n      //throw error if not match job\n      default:\n        throw new NotFoundException(`Email job type not found`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                passwordResetEmail\n                            \n                            \n                                    Public\n                                    Async\n                                sendAccountVerifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        passwordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    passwordResetEmail(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendAccountVerifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAccountVerifyEmail(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bullmq';\nimport { Injectable } from '@nestjs/common';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class MailService {\n  constructor(\n    //inject mailer service\n    @InjectQueue('mailer') private mailQueue: Queue,\n  ) {}\n\n  //send account verify email\n  public async sendAccountVerifyEmail(data: {\n    to: string;\n    userName: string;\n    verificationLink: string;\n    year: number;\n  }) {\n    await this.mailQueue.add('account-verify-email', data);\n  }\n\n  //send password reset email\n  public async passwordResetEmail(data: {\n    to: string;\n    name: string;\n    resetUrl: string;\n  }) {\n    await this.mailQueue.add('reset-password-email', data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient } from 'generated/prisma';\n\n@Injectable()\nexport class PrismaService extends PrismaClient {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bullmq';\nimport { Global, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Global()\n@Module({\n  imports: [\n    //configure bullmq\n    BullModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        connection: {\n          host: config.get('REDIS_HOST') as string,\n          password: config.get('REDIS_PASSWORD') as string,\n          port: config.get('REDIS_PORT') as number,\n        },\n      }),\n    }),\n    //register uploader queue with default options\n    BullModule.registerQueue(\n      {\n        name: 'uploader',\n        defaultJobOptions: {\n          removeOnComplete: {\n            age: 3600,\n            count: 1000,\n          },\n          removeOnFail: {\n            age: 86400,\n            count: 100,\n          },\n          attempts: 3,\n          backoff: {\n            delay: 3000,\n            type: 'exponential',\n          },\n        },\n      },\n      //register uploader queue with default options\n      {\n        name: 'mailer',\n        defaultJobOptions: {\n          removeOnComplete: {\n            age: 3600,\n            count: 1000,\n          },\n          removeOnFail: {\n            age: 86400,\n            count: 100,\n          },\n          attempts: 3,\n          backoff: {\n            delay: 3000,\n            type: 'exponential',\n          },\n        },\n      },\n    ),\n  ],\n  //export the configured bullmodule\n  exports: [BullModule],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly token: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                provider\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(o => )@IsString()@IsNotEmpty()@MinLength(8, {message: 'Password minimum 8 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  ValidateIf,\n} from 'class-validator';\nimport { Provider } from 'generated/prisma';\n\nexport class RegisterUserDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  @ValidateIf((o: RegisterUserDto) => o.provider === 'email')\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8, {\n    message: 'Password minimum 8 characters long',\n  })\n  readonly password: string;\n\n  provider: Provider;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                token\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                uid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class ResetPasswordDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly uid: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly token: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseException.html":{"url":"classes/ResponseException.html","title":"class - ResponseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/response.exception.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/response.exception.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class ResponseException implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response: Response = ctx.getResponse();\n    const request: Request = ctx.getRequest();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const errorResponse =\n      exception instanceof HttpException ? exception.getResponse() : null;\n\n    // Initialize message and errors\n    let message: string;\n    let errors: { field: string | null; message: string }[] | undefined;\n\n    if (typeof errorResponse === 'string') {\n      message = errorResponse;\n    } else if (errorResponse !== null && typeof errorResponse === 'object') {\n      // errorResponse is an object\n      if ('message' in errorResponse) {\n        const msg = (errorResponse as Error).message;\n\n        if (Array.isArray(msg)) {\n          errors = msg.map((m) => ({\n            field: null,\n            message: m,\n          }));\n          message = 'Validation failed';\n        } else if (typeof msg === 'string') {\n          message = msg;\n        } else {\n          message = exception.message || 'Internal Server Error';\n        }\n      } else if (\n        'error' in errorResponse &&\n        typeof (errorResponse as any).error === 'string'\n      ) {\n        message = (errorResponse as any).error;\n      } else {\n        message = exception.message || 'Internal Server Error';\n      }\n    } else {\n      message = exception.message || 'Internal Server Error';\n    }\n\n    response.status(status).json({\n      success: false,\n      message,\n      errors,\n      meta: {\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseInterceptor.html":{"url":"classes/ResponseInterceptor.html","title":"class - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/response.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/response.interceptor.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, NestInterceptor } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { map, Observable } from 'rxjs';\nexport class ResponseInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    const request: Request = context.switchToHttp().getRequest();\n    const response: Response = context.switchToHttp().getResponse();\n\n    const startTime = Date.now();\n\n    return next.handle().pipe(\n      map((originalRes) => {\n        const statusCode = response.statusCode;\n        const duration = Date.now() - startTime;\n\n        const data = originalRes?.data ?? {};\n        const message = originalRes?.message ?? 'Request Successful';\n        const meta = originalRes?.meta ?? {};\n\n        return {\n          success: true,\n          data,\n          message,\n          meta: {\n            status_code: statusCode,\n            response_time: `${duration}ms`,\n            timestamp: Date.now(),\n            path: request.url,\n            ...meta,\n          },\n        };\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(RegisterUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailVerified\n                            \n                            \n                                    \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                refreshTokenExp\n                            \n                            \n                                    \n                                    \n                                resetToken\n                            \n                            \n                                    \n                                    \n                                resetTokenExp\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                verifyToken\n                            \n                            \n                                    \n                                    \n                                verifyTokenExp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshTokenExp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        resetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        resetTokenExp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(UserRole)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        verifyToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        verifyTokenExp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport {\n  IsBoolean,\n  IsDate,\n  IsEnum,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { UserRole } from 'generated/prisma';\nimport { RegisterUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(RegisterUserDto) {\n  @IsEnum(UserRole)\n  @IsOptional()\n  role: UserRole;\n\n  @IsString()\n  @IsOptional()\n  refreshToken: string | null;\n\n  @IsDate()\n  @IsOptional()\n  refreshTokenExp: Date | null;\n\n  @IsString()\n  @IsOptional()\n  verifyToken: string | null;\n\n  @IsDate()\n  @IsOptional()\n  verifyTokenExp: Date | null;\n\n  @IsString()\n  @IsOptional()\n  resetToken: string | null;\n\n  @IsDate()\n  @IsOptional()\n  resetTokenExp: Date | null;\n\n  @IsBoolean()\n  @IsOptional()\n  isDeleted: boolean;\n  @IsBoolean()\n  @IsOptional()\n  emailVerified: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_providers\n\n\n\ncluster_UploadModule_exports\n\n\n\n\nUploadService \n\nUploadService \n\n\n\nUploadModule\n\nUploadModule\n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nUploadService\n\nUploadService\n\nUploadModule -->\n\nUploadService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/upload/upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploadService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { S3Client } from '@aws-sdk/client-s3';\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { UploadProcessor } from './upload.processor';\nimport { UploadService } from './upload.service';\n\n@Module({\n  imports: [],\n  providers: [\n    UploadService,\n    UploadProcessor,\n    {\n      provide: 'AWS_S3',\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return new S3Client({\n          region: config.get('AWS_REGION') as string,\n          credentials: {\n            accessKeyId: config.get('AWS_ACCESS_KEY_ID') as string,\n            secretAccessKey: config.get(\n              'AWS_SECRET_ACCESS_KEY',\n            ) as string,\n          },\n        });\n      },\n    },\n  ],\n  exports: [UploadService],\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadProcessor.html":{"url":"classes/UploadProcessor.html","title":"class - UploadProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client)\n                    \n                \n                        \n                            \n                                Defined in src/upload/upload.processor.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: Job)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.processor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Inject, RequestTimeoutException } from '@nestjs/common';\nimport { Job } from 'bullmq';\n\n@Processor('uploader')\nexport class UploadProcessor extends WorkerHost {\n  constructor(\n    //inject aws service\n    @Inject('AWS_S3') private readonly s3: S3Client,\n  ) {\n    super();\n  }\n\n  async process(\n    job: Job,\n  ): Promise {\n    const { data } = job;\n    //upload to s3\n    try {\n      const command = new PutObjectCommand({\n        Bucket: data.bucketName,\n        Key: data.key,\n        Body: Buffer.from(data.buffer, 'base64'),\n        ContentType: data.mimeType,\n      });\n      await this.s3.send(command);\n      return data.key;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                cloudfrontUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                enqueueUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                            \n                                    Public\n                                    Async\n                                uploadAndGetUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadQueue: Queue, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/upload/upload.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        enqueueUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    enqueueUpload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(fileName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadAndGetUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadAndGetUrl(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/upload/upload.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cloudfrontUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/upload/upload.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bullmq';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Queue } from 'bullmq';\nimport * as path from 'path';\nimport { Util } from 'src/utils/util';\n\n@Injectable()\nexport class UploadService {\n  private readonly bucketName: string;\n  private readonly cloudfrontUrl: string;\n  constructor(\n    //inject bullmq service\n    @InjectQueue('uploader') private readonly uploadQueue: Queue,\n    //inject config service\n    private readonly config: ConfigService,\n  ) {\n    //cloudfront url\n    this.cloudfrontUrl = this.config.get(\n      'AWS_CLOUDFRONT_URL',\n    ) as string;\n    //bucket name\n    this.bucketName = this.config.get('AWS_PUBLIC_BUCKET') as string;\n  }\n\n  //file uploader queue method\n  private async enqueueUpload(file: Express.Multer.File): Promise {\n    //check mime type\n    if (\n      !['image/gif', 'image/jpg', 'image/jpeg', 'image/png'].includes(\n        file.mimetype,\n      )\n    ) {\n      throw new BadRequestException('Mime type not supported');\n    }\n    //generate key\n    const key = this.generateFileName(file.originalname);\n    await this.uploadQueue.add('upload-image', {\n      buffer: file.buffer.toString('base64'),\n      mimeType: file.mimetype,\n      bucketName: this.bucketName,\n      key,\n    });\n    return key;\n  }\n\n  //generate unique filenames\n  private generateFileName(fileName: string): string {\n    const uuid = Util.genToken(16);\n    const ext = path.extname(fileName);\n    return `${Date.now()}-${uuid}${ext}`;\n  }\n\n  //get cloudfront url\n  public async uploadAndGetUrl(file: Express.Multer.File): Promise {\n    const fileName = await this.enqueueUpload(file);\n    return `${this.cloudfrontUrl}/${fileName}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Util.html":{"url":"classes/Util.html","title":"class - Util","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Util\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/util.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                genToken\n                            \n                            \n                                    Static\n                                hash\n                            \n                            \n                                    Static\n                                match\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        genToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    genToken(byte: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/util.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                byte\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    32\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(text: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/util.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        match\n                        \n                    \n                \n            \n            \n                \n                        \n                    match(text: string | Buffer, hashed: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/util.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hashed\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as argon from 'argon2';\nimport { randomBytes } from 'crypto';\n\nexport class Util {\n  public static hash(text: string | Buffer): Promise {\n    return argon.hash(text);\n  }\n\n  public static match(text: string | Buffer, hashed: string): Promise {\n    return argon.verify(hashed, text);\n  }\n\n  public static genToken(byte: number = 32): string {\n    return randomBytes(byte).toString('hex');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/auth/dto/account-verify.dto.ts\n            \n            class\n            AccountVerifyDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/forget-password.dto.ts\n            \n            class\n            ForgetPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/github-login.dto.ts\n            \n            class\n            GithubLoginDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/google-login.dto.ts\n            \n            class\n            GoogleLoginDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/logout.dto.ts\n            \n            class\n            LogoutDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/strategies/github.strategy.ts\n            \n            injectable\n            GithubStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-access.strategy.ts\n            \n            injectable\n            JwtAccessStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/types/index.ts\n            \n            interface\n            IJwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/response.exception.ts\n            \n            class\n            ResponseException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/response.interceptor.ts\n            \n            class\n            ResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mail/mail.processor.ts\n            \n            class\n            MailProcessor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/mail/mail.processor.ts\n            \n            type alias\n            MailJob\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mail/mail.processor.ts\n            \n            type alias\n            MailJobData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mail/mail.processor.ts\n            \n            type alias\n            PasswordResetMailData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mail/mail.processor.ts\n            \n            type alias\n            VerificationMailData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/upload/upload.processor.ts\n            \n            class\n            UploadProcessor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/utils/system-info.ts\n            \n            function\n            formatBytes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/system-info.ts\n            \n            function\n            formatUptime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/system-info.ts\n            \n            function\n            getSystemInfoJson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/util.ts\n            \n            class\n            Util\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.858.0\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/bullmq : ^11.0.3\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/throttler : ^6.4.0\n        \n            @prisma/client : ^6.13.0\n        \n            argon2 : ^0.43.1\n        \n            aws-sdk : ^2.1692.0\n        \n            bullmq : ^5.56.9\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            compression : ^1.8.1\n        \n            handlebars : ^4.7.8\n        \n            helmet : ^8.1.0\n        \n            install : ^0.13.0\n        \n            nodemailer : ^7.0.5\n        \n            passport : ^0.7.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            formatBytes   (src/.../system-info.ts)\n                        \n                        \n                            formatUptime   (src/.../system-info.ts)\n                        \n                        \n                            getSystemInfoJson   (src/.../system-info.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/system-info.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatBytes\n                        \n                    \n                \n            \n            \n                \nformatBytes(bytes: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                bytes\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatUptime\n                        \n                    \n                \n            \n            \n                \nformatUptime(seconds: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                seconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSystemInfoJson\n                        \n                    \n                \n            \n            \n                \ngetSystemInfoJson()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📌 Project Overview\nConsole.Log - A portal for developer - where users can post blogs, tech news, tech topics, tech suggestions, upvote/downvote, reply to post, reply to user.\n🎯 Goals & Objectives\nThe goal was to create a forum/platform only for developer. That will help to develop networking, help each other with valuable knowledge, post new tech news/blogs.\n🛠️ Tech Stack\n\nFrontend: NextJS\nBackend: NestJS, PostgreSQL, Prisma, BullMQ, JWT\n\n🚀 Features\n\n...\n...\n\n🧱 Challenges Faced\n\nBuffer serialization problem with BullMQ: Binary data got corrupted during file uploads.\n\n🧠 How I Overcame Them\n\nDiscovered BullMQ doesn’t handle Buffer well, so I converted it to base64 before queueing and decoded it in the processor\n\n📚 Key Learnings\n\n...\n...\n\n📷 Screenshots / Diagrams\n(Optional)\n🚧 Future Improvements\n\n...\n\n✅ Conclusion\nA quick wrap-up...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UploadModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nQueueModule->MailModule\n\n\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAuthModule -->\n\nUploadModule->AuthModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGithubStrategy\n\nGithubStrategy\n\nAuthModule -->\n\nGithubStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtAccessStrategy\n\nJwtAccessStrategy\n\nAuthModule -->\n\nJwtAccessStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nUploadModule -->\n\nUploadService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MailJob   (src/.../mail.processor.ts)\n                        \n                        \n                            MailJobData   (src/.../mail.processor.ts)\n                        \n                        \n                            PasswordResetMailData   (src/.../mail.processor.ts)\n                        \n                        \n                            VerificationMailData   (src/.../mail.processor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/mail/mail.processor.ts\n    \n    \n        \n            \n                \n                    \n                    MailJob\n                \n            \n            \n                \n                        Job | Job\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MailJobData\n                \n            \n            \n                \n                        VerificationMailData | PasswordResetMailData\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PasswordResetMailData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    VerificationMailData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
